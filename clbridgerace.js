document.open()
document.write("<!DOCTYPE html>\r\n<html lang=\"en-us\">\r\n\r\n<head>\r\n  <base href=\"https:\/\/rawcdn.githack.com\/bubbls\/youtube-playables\/213d19aad1db5acdebe8e07a80ae4998f3146e33\/bridge-race\/\">\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n\r\n  <title>YT Game Wrapper WebGL Template<\/title>\r\n  <link rel=\"stylesheet\" href=\"TemplateData\/style.css\" nonce=\"xc9yLMIA-AeOcD4uccnAOg\">\r\n  <script src=\"https:\/\/rawcdn.githack.com\/bubbls\/youtube-playables\/main\/ytgame.js\" nonce=\"xc9yLMIA-AeOcD4uccnAOg\">\/\/ Load YT Game API code<\/script>\r\n<\/head>\r\n\r\n<body>\r\n  <div id=\"unity-container\" class=\"unity-desktop\">\r\n    <canvas id=\"unity-canvas\" width=100% height=100% tabindex=\"-1\"><\/canvas>\r\n    <div id=\"unity-loading-bar\">\r\n      <div id=\"unity-logo\"><\/div>\r\n      <div id=\"unity-progress-bar-empty\">\r\n        <div id=\"unity-progress-bar-full\"><\/div>\r\n      <\/div>\r\n    <\/div>\r\n    <div id=\"unity-warning\"> <\/div>\r\n  <\/div>\r\n\r\n  <script src=\"unarchiver.min.js\" nonce=\"xc9yLMIA-AeOcD4uccnAOg\">\/\/ used for decompression if zip files are used<\/script>\r\n  <script nonce=\"xc9yLMIA-AeOcD4uccnAOg\"> \/\/ Logic for Unity contianer\r\n    var container = document.querySelector(\"#unity-container\");\r\n    var canvas = document.querySelector(\"#unity-canvas\");\r\n    var loadingBar = document.querySelector(\"#unity-loading-bar\");\r\n    var progressBarFull = document.querySelector(\"#unity-progress-bar-full\");\r\n    var fullscreenButton = document.querySelector(\"#unity-fullscreen-button\");\r\n    var fullscreenOverlayButton = document.querySelector(\"#unity-overlay-fullscreen-button\");\r\n    var quitcanvas = document.querySelector(\"#quit-canvas\");\r\n    var warningBanner = document.querySelector(\"#unity-warning\");\r\n\r\n    \/\/ For YT it is strongly encouraged that all warnings \/ errors show in\r\n    \/\/ console and banners should be in game as needed to not confuse users.\r\n    \/\/ \r\n    \/\/ If needed please uncomment section below to show a temporary message \r\n    \/\/ banner\/ribbon for a few seconds, or a permanent error message on top \r\n    \/\/ of the canvas if type=='error'.\r\n    function unityShowBanner(msg, type) {\r\n      \/\/ function updateBannerVisibility() {\r\n      \/\/   warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';\r\n      \/\/ }\r\n      \/\/ var div = document.createElement('div');\r\n      \/\/ div.innerHTML = msg;\r\n      \/\/ warningBanner.appendChild(div);\r\n      \/\/ if (type == 'error') div.style = 'background: red; padding: 10px;';\r\n      \/\/ else {\r\n      \/\/   if (type == 'warning') div.style = 'background: yellow; padding: 10px;';\r\n      \/\/   setTimeout(function() {\r\n      \/\/     warningBanner.removeChild(div);\r\n      \/\/     updateBannerVisibility();\r\n      \/\/   }, 5000);\r\n      \/\/ }\r\n      \/\/ updateBannerVisibility();\r\n    }\r\n\r\n    var buildUrl = \"Build\";\r\n    var loaderUrl = buildUrl + \"\/BridgeRace.loader.js\";\r\n    var config = {\r\n      dataUrl: buildUrl + \"\/BridgeRace.data.unityweb\",\r\n      frameworkUrl: buildUrl + \"\/BridgeRace.framework.js.unityweb\",\r\n        codeUrl: buildUrl + \"\/BridgeRace.wasm.unityweb\",\r\n      streamingAssetsUrl: \"StreamingAssets\",\r\n      companyName: \"Garawell\",\r\n      productName: \"Bridge Race\",\r\n      productVersion: \"3.21\",\r\n      showBanner: unityShowBanner,\r\n    };\r\n\r\n    \/\/ By default, Unity keeps WebGL canvas render target size matched with\r\n    \/\/ the DOM size of the canvas element (scaled by window.devicePixelRatio)\r\n    \/\/ Set this to false if you want to decouple this synchronization from\r\n    \/\/ happening inside the engine, and you would instead like to size up\r\n    \/\/ the canvas DOM size and WebGL render target sizes yourself.\r\n    \/\/ config.matchWebGLToCanvasSize = false;\r\n\r\n    if (\/iPhone|iPad|iPod|Android\/i.test(navigator.userAgent)) {\r\n      \/\/ Mobile device style: fill the whole browser client area with the game canvas:\r\n\r\n      var meta = document.createElement('meta');\r\n      meta.name = 'viewport';\r\n      meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';\r\n      document.getElementsByTagName('head')[0].appendChild(meta);\r\n      container.className = \"unity-mobile\";\r\n      canvas.className = \"unity-mobile\";\r\n\r\n      \/\/ To lower canvas resolution on mobile devices to gain some\r\n      \/\/ performance, uncomment the following line:\r\n      \/\/ config.devicePixelRatio = 1;\r\n\r\n    } else {\r\n      \/\/ Desktop style: Render the game canvas in a window that can be maximized to fullscreen:\r\n      canvas.style.width = \"100%\";\r\n      canvas.style.height = \"100%\";\r\n    }\r\n\r\n    loadingBar.style.display = \"block\";\r\n\r\n    \/\/ loadResources is only used if you need load Zipped files for .wasm, .js, or .data and need \r\n    \/\/ them to be decompressed. If the file is not zipped we bypass decompression step automatically,\r\n    \/\/ however its best to not trigger this if you dont used compression. \r\n    \/\/ NOTE: GZip does not work ATM.  If this is needed Unarchiver will need to be updated.\r\n    loadResources = (callback) => {\r\n      const subZipStr = '.zip';\r\n      const subWASMStr = '.wasm';\r\n      const subJSStr = '.js';\r\n\r\n      var codeUrl = config.codeUrl;\r\n      var shouldDecompress = true;\r\n\r\n      \/\/ check if .zip already exists in the URL, if it doesnt check if a .zip file exists\r\n      if (!codeUrl.includes(subZipStr)) {\r\n        if (UrlExists(codeUrl + subZipStr)) {\r\n          codeUrl = codeUrl + subZipStr;\r\n        } else {\r\n          shouldDecompress = false;\r\n        }\r\n      }\r\n\r\n      \/\/ decompress if using a zip file, otherwise just load regular wasm file\r\n      if (shouldDecompress) {\r\n        \/\/ Decompress the file based on the type, WASM, JS, etc.\r\n        \/\/ if you need more types please add a const above and modify the type logic below.\r\n        var blobType = 'application\/octet-stream';\r\n        if (codeUrl.includes(subWASMStr)){\r\n          blobType = 'application\/wasm';\r\n        } else if (codeUrl.includes(subJSStr)){\r\n          blobType = 'text\/javascript';\r\n        }\r\n        \r\n        DecompressFile(codeUrl, blobType, (file) => {\r\n          config.codeUrl = file;\r\n          callback();\r\n        });\r\n      } else {\r\n        callback();\r\n      }\r\n    }\r\n\r\n    \/\/ Fetch\/Load a file then call our callback \r\n    loadZipData = (url, callback) => {\r\n      fetch(url)\r\n        .then(response => response.blob())\r\n        .then(blob => {\r\n          callback(blob);\r\n        });\r\n    }\r\n\r\n    \/\/ Check if URL \/ File exists\r\n    function UrlExists(urlToCheck)\r\n    {\r\n        var httpReq = new XMLHttpRequest();\r\n        httpReq.open('HEAD', urlToCheck, false);\r\n        httpReq.send();\r\n        return httpReq.status!=404;\r\n    }\r\n\r\n    \/\/ decompress files and call callback\r\n    \/\/ TODO: test and potentially switch to Compression Streams API\r\n    function DecompressFile(file, blobMimeType, callback) {\r\n      let decompressedFile;\r\n\r\n      loadZipData(file, (f) => {\r\n        Unarchiver.open(f).then(async function (archive) {\r\n          for (let entry of archive.entries) {\r\n            if (entry.is_file) {\r\n              let entryRead = await entry.read();\r\n              let entryData = await entryRead.arrayBuffer();\r\n              let dataBlob = new Blob([new Uint8Array(entryData)], { type: blobMimeType });\r\n              decompressedFile = window.URL.createObjectURL(dataBlob);\r\n            }\r\n          }\r\n          callback(decompressedFile);\r\n        });\r\n      });\r\n    }\r\n\r\n    var unityGameInstance = null;\r\n    \/\/ Setup the Unity section once zip file is downloaded and decompressed\r\n    function InitUnitySection() {\r\n      var script = document.createElement(\"script\");\r\n      script.src = loaderUrl;\r\n      script.onload = () => {\r\n        createUnityInstance(canvas, config, (progress) => {\r\n          progressBarFull.style.width = 100 * progress + \"%\";\r\n          }).then((unityInstance) => {\r\n            unityGameInstance = unityInstance;\r\n            loadingBar.style.display = \"none\";\r\n          }).catch((message) => {\r\n            console.error(message);\r\n          });\r\n      };\r\n\r\n      document.body.appendChild(script);\r\n    }\r\n\r\n    \/\/ Path 1: Use this path if no decompression of your .wasm, .data, .js files are needed\r\n    InitUnitySection();\r\n\r\n    \/\/ Path 2: Use this path to Load resources (.wasm, .data, .js) that are Zipped and need to be decompressed\r\n    \/\/ if you dont use compresseion its best to comment out Path 1 and uncomment Path 2.\r\n    \/\/ loadResources(InitUnitySection);  \/\/ Uncomment this line to start Unity by loading zipped files\r\n  <\/script>\r\n<\/body>\r\n<\/html>");
document.close()
