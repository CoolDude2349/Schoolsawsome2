document.open()
document.write("<html lang=\"en\"><head><script src=\"\/\/www.google.com\/jsapi\"><\/script><script>window.parent.maeExportApis_();<\/script>\r\n\r\n\r\n  <meta charset=\"UTF-8\">\r\n  \r\n  \r\n\r\n<style type=\"text\/css\">#button {\r\n  display:none;\r\n}\r\n.imgb_vis {\r\n  animation: imgb-animation 7s linear;\r\n}\r\n@keyframes imgb-animation {\r\n  10% {\r\n    transform: translateX(0);\r\n  }\r\n  20% {\r\n    transform: translateX(100px);\r\n  }\r\n  90% {\r\n    transform: translateX(100px);\r\n  }\r\n  100% {\r\n    transform: translateX(0);\r\n  }\r\n}<\/style><\/head>\r\n<body id=\"t\">\r\n\r\n\r\n\r\n\r\n<title>T-Rex Game<\/title>\r\n\r\n\r\n\t\r\n\t<script type=\"text\/javascript\">\r\n\tfunction hideClass(name) {\r\n       var myClasses = document.querySelectorAll(name),\r\n      i = 0,\r\n      l = myClasses.length;\r\n\r\n      for (i; i < l; i++) {\r\n        myClasses[i].style.display = 'none';\r\n      }\r\n\t}\r\n    \/\/ Copyright (c) 2014 The Chromium Authors. All rights reserved.\r\n    \/\/ Use of this source code is governed by a BSD-style license that can be\r\n    \/\/ found in the LICENSE file.\r\n    (function() {\r\n    'use strict';\r\n    \/**\r\n    * T-Rex runner.\r\n    * @param {string} outerContainerId Outer containing element id.\r\n    * @param {object} opt_config\r\n    * @constructor\r\n    * @export\r\n    *\/\r\n    function Runner(outerContainerId, opt_config) {\r\n    \/\/ Singleton\r\n    if (Runner.instance_) {\r\n    return Runner.instance_;\r\n    }\r\n    Runner.instance_ = this;\r\n    this.outerContainerEl = document.querySelector(outerContainerId);\r\n    this.containerEl = null;\r\n    this.detailsButton = this.outerContainerEl.querySelector('#details-button');\r\n    this.config = opt_config || Runner.config;\r\n    this.dimensions = Runner.defaultDimensions;\r\n    this.canvas = null;\r\n    this.canvasCtx = null;\r\n    this.tRex = null;\r\n    this.distanceMeter = null;\r\n    this.distanceRan = 0;\r\n    this.highestScore = 0;\r\n    this.time = 0;\r\n    this.runningTime = 0;\r\n    this.msPerFrame = 1000 \/ FPS;\r\n    this.currentSpeed = this.config.SPEED;\r\n    this.obstacles = [];\r\n    this.started = false;\r\n    this.activated = false;\r\n    this.crashed = false;\r\n    this.paused = false;\r\n    this.resizeTimerId_ = null;\r\n    this.playCount = 0;\r\n    \/\/ Sound FX.\r\n    this.audioBuffer = null;\r\n    this.soundFx = {};\r\n    \/\/ Global web audio context for playing sounds.\r\n    this.audioContext = null;\r\n    \/\/ Images.\r\n    this.images = {};\r\n    this.imagesLoaded = 0;\r\n    this.loadImages();\r\n    }\r\n    window['Runner'] = Runner;\r\n    \/**\r\n    * Default game width.\r\n    * @const\r\n    *\/\r\n    var DEFAULT_WIDTH = 600;\r\n    \/**\r\n    * Frames per second.\r\n    * @const\r\n    *\/\r\n    var FPS = 60;\r\n    \/** @const *\/\r\n    var IS_HIDPI = window.devicePixelRatio > 1;\r\n    \/** @const *\/\r\n    var IS_IOS =\r\n    window.navigator.userAgent.indexOf('UIWebViewForStaticFileContent') > -1;\r\n    \/** @const *\/\r\n    var IS_MOBILE = window.navigator.userAgent.indexOf('Mobi') > -1 || IS_IOS;\r\n    \/** @const *\/\r\n    var IS_TOUCH_ENABLED = 'ontouchstart' in window;\r\n    \/**\r\n    * Default game configuration.\r\n    * @enum {number}\r\n    *\/\r\n    Runner.config = {\r\n    ACCELERATION: 0.001,\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BOTTOM_PAD: 10,\r\n    CLEAR_TIME: 3000,\r\n    CLOUD_FREQUENCY: 0.5,\r\n    GAMEOVER_CLEAR_TIME: 750,\r\n    GAP_COEFFICIENT: 0.6,\r\n    GRAVITY: 0.6,\r\n    INITIAL_JUMP_VELOCITY: 12,\r\n    MAX_CLOUDS: 6,\r\n    MAX_OBSTACLE_LENGTH: 3,\r\n    MAX_SPEED: 12,\r\n    MIN_JUMP_HEIGHT: 35,\r\n    MOBILE_SPEED_COEFFICIENT: 1.2,\r\n    RESOURCE_TEMPLATE_ID: 'audio-resources',\r\n    SPEED: 6,\r\n    SPEED_DROP_COEFFICIENT: 3\r\n    };\r\n    \/**\r\n    * Default dimensions.\r\n    * @enum {string}\r\n    *\/\r\n    Runner.defaultDimensions = {\r\n    WIDTH: DEFAULT_WIDTH,\r\n    HEIGHT: 150\r\n    };\r\n    \/**\r\n    * CSS class names.\r\n    * @enum {string}\r\n    *\/\r\n    Runner.classes = {\r\n    CANVAS: 'runner-canvas',\r\n    CONTAINER: 'runner-container',\r\n    CRASHED: 'crashed',\r\n    ICON: 'icon-offline',\r\n    TOUCH_CONTROLLER: 'controller'\r\n    };\r\n    \/**\r\n    * Image source urls.\r\n    * @enum {array.<object>}\r\n    *\/\r\n    Runner.imageSources = {\r\n    LDPI: [\r\n    {name: 'CACTUS_LARGE', id: '1x-obstacle-large'},\r\n    {name: 'CACTUS_SMALL', id: '1x-obstacle-small'},\r\n    {name: 'CLOUD', id: '1x-cloud'},\r\n    {name: 'HORIZON', id: '1x-horizon'},\r\n    {name: 'RESTART', id: '1x-restart'},\r\n    {name: 'TEXT_SPRITE', id: '1x-text'},\r\n    {name: 'TREX', id: '1x-trex'}\r\n    ],\r\n    HDPI: [\r\n    {name: 'CACTUS_LARGE', id: '2x-obstacle-large'},\r\n    {name: 'CACTUS_SMALL', id: '2x-obstacle-small'},\r\n    {name: 'CLOUD', id: '2x-cloud'},\r\n    {name: 'HORIZON', id: '2x-horizon'},\r\n    {name: 'RESTART', id: '2x-restart'},\r\n    {name: 'TEXT_SPRITE', id: '2x-text'},\r\n    {name: 'TREX', id: '2x-trex'}\r\n    ]\r\n    };\r\n    \/**\r\n    * Sound FX. Reference to the ID of the audio tag on interstitial page.\r\n    * @enum {string}\r\n    *\/\r\n    Runner.sounds = {\r\n    BUTTON_PRESS: 'offline-sound-press',\r\n    HIT: 'offline-sound-hit',\r\n    SCORE: 'offline-sound-reached'\r\n    };\r\n    \/**\r\n    * Key code mapping.\r\n    * @enum {object}\r\n    *\/\r\n    Runner.keycodes = {\r\n    JUMP: {'38': 1, '32': 1}, \/\/ Up, spacebar\r\n    DUCK: {'40': 1}, \/\/ Down\r\n    RESTART: {'13': 1} \/\/ Enter\r\n    };\r\n    \/**\r\n    * Runner event names.\r\n    * @enum {string}\r\n    *\/\r\n    Runner.events = {\r\n    ANIM_END: 'webkitAnimationEnd',\r\n    CLICK: 'click',\r\n    KEYDOWN: 'keydown',\r\n    KEYUP: 'keyup',\r\n    MOUSEDOWN: 'mousedown',\r\n    MOUSEUP: 'mouseup',\r\n    RESIZE: 'resize',\r\n    TOUCHEND: 'touchend',\r\n    TOUCHSTART: 'touchstart',\r\n    VISIBILITY: 'visibilitychange',\r\n    BLUR: 'blur',\r\n    FOCUS: 'focus',\r\n    LOAD: 'load'\r\n    };\r\n    Runner.prototype = {\r\n    \/**\r\n    * Setting individual settings for debugging.\r\n    * @param {string} setting\r\n    * @param {*} value\r\n    *\/\r\n    updateConfigSetting: function(setting, value) {\r\n    if (setting in this.config && value != undefined) {\r\n    this.config[setting] = value;\r\n    switch (setting) {\r\n    case 'GRAVITY':\r\n    case 'MIN_JUMP_HEIGHT':\r\n    case 'SPEED_DROP_COEFFICIENT':\r\n    this.tRex.config[setting] = value;\r\n    break;\r\n    case 'INITIAL_JUMP_VELOCITY':\r\n    this.tRex.setJumpVelocity(value);\r\n    break;\r\n    case 'SPEED':\r\n    this.setSpeed(value);\r\n    break;\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Load and cache the image assets from the page.\r\n    *\/\r\n    loadImages: function() {\r\n    var imageSources = IS_HIDPI ? Runner.imageSources.HDPI :\r\n    Runner.imageSources.LDPI;\r\n    var numImages = imageSources.length;\r\n    for (var i = numImages - 1; i >= 0; i--) {\r\n    var imgSource = imageSources[i];\r\n    this.images[imgSource.name] = document.getElementById(imgSource.id);\r\n    }\r\n    this.init();\r\n    },\r\n    \/**\r\n    * Load and decode base 64 encoded sounds.\r\n    *\/\r\n    loadSounds: function() {\r\n    if (!IS_IOS) {\r\n    this.audioContext = new AudioContext();\r\n    var resourceTemplate =\r\n    document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\r\n    for (var sound in Runner.sounds) {\r\n    var soundSrc =\r\n    resourceTemplate.getElementById(Runner.sounds[sound]).src;\r\n    soundSrc = soundSrc.substr(soundSrc.indexOf(',') + 1);\r\n    var buffer = decodeBase64ToArrayBuffer(soundSrc);\r\n    \/\/ Async, so no guarantee of order in array.\r\n    this.audioContext.decodeAudioData(buffer, function(index, audioData) {\r\n    this.soundFx[index] = audioData;\r\n    }.bind(this, sound));\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\r\n    * @param {number} opt_speed\r\n    *\/\r\n    setSpeed: function(opt_speed) {\r\n    var speed = opt_speed || this.currentSpeed;\r\n    \/\/ Reduce the speed on smaller mobile screens.\r\n    if (this.dimensions.WIDTH < DEFAULT_WIDTH) {\r\n    var mobileSpeed = speed * this.dimensions.WIDTH \/ DEFAULT_WIDTH *\r\n    this.config.MOBILE_SPEED_COEFFICIENT;\r\n    this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\r\n    } else if (opt_speed) {\r\n    this.currentSpeed = opt_speed;\r\n    }\r\n    },\r\n    \/**\r\n    * Game initialiser.\r\n    *\/\r\n    init: function() {\r\n    \/\/ Hide the static icon.\r\n    \/\/document.querySelector('.' + Runner.classes.ICON).style.visibility = 'hidden';\r\n    this.adjustDimensions();\r\n    this.setSpeed();\r\n    this.containerEl = document.createElement('div');\r\n    this.containerEl.className = Runner.classes.CONTAINER;\r\n    \/\/ Player canvas container.\r\n    this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH,\r\n    this.dimensions.HEIGHT, Runner.classes.PLAYER);\r\n    this.canvasCtx = this.canvas.getContext('2d');\r\n    this.canvasCtx.fillStyle = '#f7f7f7';\r\n    this.canvasCtx.fill();\r\n    Runner.updateCanvasScaling(this.canvas);\r\n    \/\/ Horizon contains clouds, obstacles and the ground.\r\n    this.horizon = new Horizon(this.canvas, this.images, this.dimensions,\r\n    this.config.GAP_COEFFICIENT);\r\n    \/\/ Distance meter\r\n    this.distanceMeter = new DistanceMeter(this.canvas,\r\n    this.images.TEXT_SPRITE, this.dimensions.WIDTH);\r\n    \/\/ Draw t-rex\r\n    this.tRex = new Trex(this.canvas, this.images.TREX);\r\n    this.outerContainerEl.appendChild(this.containerEl);\r\n    if (IS_MOBILE) {\r\n    this.createTouchController();\r\n    }\r\n    this.startListening();\r\n    this.update();\r\n    window.addEventListener(Runner.events.RESIZE,\r\n    this.debounceResize.bind(this));\r\n    },\r\n    \/**\r\n    * Create the touch controller. A div that covers whole screen.\r\n    *\/\r\n    createTouchController: function() {\r\n    this.touchController = document.createElement('div');\r\n    this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\r\n    },\r\n    \/**\r\n    * Debounce the resize event.\r\n    *\/\r\n    debounceResize: function() {\r\n    if (!this.resizeTimerId_) {\r\n    this.resizeTimerId_ =\r\n    setInterval(this.adjustDimensions.bind(this), 250);\r\n    }\r\n    },\r\n    \/**\r\n    * Adjust game space dimensions on resize.\r\n    *\/\r\n    adjustDimensions: function() {\r\n    clearInterval(this.resizeTimerId_);\r\n    this.resizeTimerId_ = null;\r\n    var boxStyles = window.getComputedStyle(this.outerContainerEl);\r\n    var padding = Number(boxStyles.paddingLeft.substr(0,\r\n    boxStyles.paddingLeft.length - 2));\r\n    this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\r\n    \/\/ Redraw the elements back onto the canvas.\r\n    if (this.canvas) {\r\n    this.canvas.width = this.dimensions.WIDTH;\r\n    this.canvas.height = this.dimensions.HEIGHT;\r\n    Runner.updateCanvasScaling(this.canvas);\r\n    this.distanceMeter.calcXPos(this.dimensions.WIDTH);\r\n    this.clearCanvas();\r\n    this.horizon.update(0, 0, true);\r\n    this.tRex.update(0);\r\n    \/\/ Outer container and distance meter.\r\n    if (this.activated || this.crashed) {\r\n    this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n    this.containerEl.style.height = this.dimensions.HEIGHT + 'px';\r\n    this.distanceMeter.update(0, Math.ceil(this.distanceRan));\r\n    this.stop();\r\n    } else {\r\n    this.tRex.draw(0, 0);\r\n    }\r\n    \/\/ Game over panel.\r\n    if (this.crashed && this.gameOverPanel) {\r\n    this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\r\n    this.gameOverPanel.draw();\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Play the game intro.\r\n    * Canvas container width expands out to the full width.\r\n    *\/\r\n    playIntro: function() {\r\n    if (!this.started && !this.crashed) {\r\n    this.playingIntro = true;\r\n    this.tRex.playingIntro = true;\r\n    \/\/ CSS animation definition.\r\n    var keyframes = '@-webkit-keyframes intro { ' +\r\n    'from { width:' + Trex.config.WIDTH + 'px }' +\r\n    'to { width: ' + this.dimensions.WIDTH + 'px }' +\r\n    '}';\r\n    document.styleSheets[0].insertRule(keyframes, 0);\r\n    this.containerEl.addEventListener(Runner.events.ANIM_END,\r\n    this.startGame.bind(this));\r\n    this.containerEl.style.webkitAnimation = 'intro .4s ease-out 1 both';\r\n    this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n    if (this.touchController) {\r\n    this.outerContainerEl.appendChild(this.touchController);\r\n    }\r\n    this.activated = true;\r\n    this.started = true;\r\n    } else if (this.crashed) {\r\n    this.restart();\r\n    }\r\n    },\r\n    \/**\r\n    * Update the game status to started.\r\n    *\/\r\n    startGame: function() {\r\n    this.runningTime = 0;\r\n    this.playingIntro = false;\r\n    this.tRex.playingIntro = false;\r\n    this.containerEl.style.webkitAnimation = '';\r\n    this.playCount++;\r\n    \/\/ Handle tabbing off the page. Pause the current game.\r\n    window.addEventListener(Runner.events.VISIBILITY,\r\n    this.onVisibilityChange.bind(this));\r\n    window.addEventListener(Runner.events.BLUR,\r\n    this.onVisibilityChange.bind(this));\r\n    window.addEventListener(Runner.events.FOCUS,\r\n    this.onVisibilityChange.bind(this));\r\n    },\r\n    clearCanvas: function() {\r\n    this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH,\r\n    this.dimensions.HEIGHT);\r\n    },\r\n    \/**\r\n    * Update the game frame.\r\n    *\/\r\n    update: function() {\r\n    this.drawPending = false;\r\n    var now = getTimeStamp();\r\n    var deltaTime = now - (this.time || now);\r\n    this.time = now;\r\n    if (this.activated) {\r\n    this.clearCanvas();\r\n    if (this.tRex.jumping) {\r\n    this.tRex.updateJump(deltaTime, this.config);\r\n    }\r\n    this.runningTime += deltaTime;\r\n    var hasObstacles = this.runningTime > this.config.CLEAR_TIME;\r\n    \/\/ First jump triggers the intro.\r\n    if (this.tRex.jumpCount == 1 && !this.playingIntro) {\r\n    this.playIntro();\r\n    }\r\n    \/\/ The horizon doesn't move until the intro is over.\r\n    if (this.playingIntro) {\r\n    this.horizon.update(0, this.currentSpeed, hasObstacles);\r\n    } else {\r\n    deltaTime = !this.started ? 0 : deltaTime;\r\n    this.horizon.update(deltaTime, this.currentSpeed, hasObstacles);\r\n    }\r\n    \/\/ Check for collisions.\r\n    var collision = hasObstacles &&\r\n    checkForCollision(this.horizon.obstacles[0], this.tRex);\r\n    if (!collision) {\r\n    this.distanceRan += this.currentSpeed * deltaTime \/ this.msPerFrame;\r\n    if (this.currentSpeed < this.config.MAX_SPEED) {\r\n    this.currentSpeed += this.config.ACCELERATION;\r\n    }\r\n    } else {\r\n    this.gameOver();\r\n    }\r\n    if (this.distanceMeter.getActualDistance(this.distanceRan) >\r\n    this.distanceMeter.maxScore) {\r\n    this.distanceRan = 0;\r\n    }\r\n    var playAcheivementSound = this.distanceMeter.update(deltaTime,\r\n    Math.ceil(this.distanceRan));\r\n    if (playAcheivementSound) {\r\n    this.playSound(this.soundFx.SCORE);\r\n    }\r\n    }\r\n    if (!this.crashed) {\r\n    this.tRex.update(deltaTime);\r\n    this.raq();\r\n    }\r\n    },\r\n    \/**\r\n    * Event handler.\r\n    *\/\r\n    handleEvent: function(e) {\r\n    return (function(evtType, events) {\r\n    switch (evtType) {\r\n    case events.KEYDOWN:\r\n    case events.TOUCHSTART:\r\n    case events.MOUSEDOWN:\r\n    this.onKeyDown(e);\r\n    break;\r\n    case events.KEYUP:\r\n    case events.TOUCHEND:\r\n    case events.MOUSEUP:\r\n    this.onKeyUp(e);\r\n    break;\r\n    }\r\n    }.bind(this))(e.type, Runner.events);\r\n    },\r\n    \/**\r\n    * Bind relevant key \/ mouse \/ touch listeners.\r\n    *\/\r\n    startListening: function() {\r\n    \/\/ Keys.\r\n    document.addEventListener(Runner.events.KEYDOWN, this);\r\n    document.addEventListener(Runner.events.KEYUP, this);\r\n    if (IS_MOBILE) {\r\n    \/\/ Mobile only touch devices.\r\n    this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\r\n    this.touchController.addEventListener(Runner.events.TOUCHEND, this);\r\n    this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\r\n    } else {\r\n    \/\/ Mouse.\r\n    document.addEventListener(Runner.events.MOUSEDOWN, this);\r\n    document.addEventListener(Runner.events.MOUSEUP, this);\r\n    }\r\n    },\r\n    \/**\r\n    * Remove all listeners.\r\n    *\/\r\n    stopListening: function() {\r\n    document.removeEventListener(Runner.events.KEYDOWN, this);\r\n    document.removeEventListener(Runner.events.KEYUP, this);\r\n    if (IS_MOBILE) {\r\n    this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\r\n    this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\r\n    this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\r\n    } else {\r\n    document.removeEventListener(Runner.events.MOUSEDOWN, this);\r\n    document.removeEventListener(Runner.events.MOUSEUP, this);\r\n    }\r\n    },\r\n    \/**\r\n    * Process keydown.\r\n    * @param {Event} e\r\n    *\/\r\n    onKeyDown: function(e) {\r\n    if (e.target != this.detailsButton) {\r\n    if (!this.crashed && (Runner.keycodes.JUMP[String(e.keyCode)] ||\r\n    e.type == Runner.events.TOUCHSTART)) {\r\n    if (!this.activated) {\r\n    this.loadSounds();\r\n    this.activated = true;\r\n    }\r\n    if (!this.tRex.jumping) {\r\n    this.playSound(this.soundFx.BUTTON_PRESS);\r\n    this.tRex.startJump();\r\n    }\r\n    }\r\n    if (this.crashed && e.type == Runner.events.TOUCHSTART &&\r\n    e.currentTarget == this.containerEl) {\r\n    this.restart();\r\n    }\r\n    }\r\n    \/\/ Speed drop, activated only when jump key is not pressed.\r\n    if (Runner.keycodes.DUCK[e.keyCode] && this.tRex.jumping) {\r\n    e.preventDefault();\r\n    this.tRex.setSpeedDrop();\r\n    }\r\n    },\r\n    \/**\r\n    * Process key up.\r\n    * @param {Event} e\r\n    *\/\r\n    onKeyUp: function(e) {\r\n    var keyCode = String(e.keyCode);\r\n    var isjumpKey = Runner.keycodes.JUMP[keyCode] ||\r\n    e.type == Runner.events.TOUCHEND ||\r\n    e.type == Runner.events.MOUSEDOWN;\r\n    if (this.isRunning() && isjumpKey) {\r\n    this.tRex.endJump();\r\n    } else if (Runner.keycodes.DUCK[keyCode]) {\r\n    this.tRex.speedDrop = false;\r\n    } else if (this.crashed) {\r\n    \/\/ Check that enough time has elapsed before allowing jump key to restart.\r\n    var deltaTime = getTimeStamp() - this.time;\r\n    if (Runner.keycodes.RESTART[keyCode] ||\r\n    (e.type == Runner.events.MOUSEUP && e.target == this.canvas) ||\r\n    (deltaTime >= this.config.GAMEOVER_CLEAR_TIME &&\r\n    Runner.keycodes.JUMP[keyCode])) {\r\n    this.restart();\r\n    }\r\n    } else if (this.paused && isjumpKey) {\r\n    this.play();\r\n    }\r\n    },\r\n    \/**\r\n    * RequestAnimationFrame wrapper.\r\n    *\/\r\n    raq: function() {\r\n    if (!this.drawPending) {\r\n    this.drawPending = true;\r\n    this.raqId = requestAnimationFrame(this.update.bind(this));\r\n    }\r\n    },\r\n    \/**\r\n    * Whether the game is running.\r\n    * @return {boolean}\r\n    *\/\r\n    isRunning: function() {\r\n    return !!this.raqId;\r\n    },\r\n    \/**\r\n    * Game over state.\r\n    *\/\r\n    gameOver: function() {\r\n    this.playSound(this.soundFx.HIT);\r\n    vibrate(200);\r\n    this.stop();\r\n    this.crashed = true;\r\n    this.distanceMeter.acheivement = false;\r\n    this.tRex.update(100, Trex.status.CRASHED);\r\n    \/\/ Game over panel.\r\n    if (!this.gameOverPanel) {\r\n    this.gameOverPanel = new GameOverPanel(this.canvas,\r\n    this.images.TEXT_SPRITE, this.images.RESTART,\r\n    this.dimensions);\r\n    } else {\r\n    this.gameOverPanel.draw();\r\n    }\r\n    \/\/ Update the high score.\r\n    if (this.distanceRan > this.highestScore) {\r\n    this.highestScore = Math.ceil(this.distanceRan);\r\n    this.distanceMeter.setHighScore(this.highestScore);\r\n    }\r\n    \/\/ Reset the time clock.\r\n    this.time = getTimeStamp();\r\n    },\r\n    stop: function() {\r\n    this.activated = false;\r\n    this.paused = true;\r\n    cancelAnimationFrame(this.raqId);\r\n    this.raqId = 0;\r\n    },\r\n    play: function() {\r\n    if (!this.crashed) {\r\n    this.activated = true;\r\n    this.paused = false;\r\n    this.tRex.update(0, Trex.status.RUNNING);\r\n    this.time = getTimeStamp();\r\n    this.update();\r\n    }\r\n    },\r\n    restart: function() {\r\n    if (!this.raqId) {\r\n    this.playCount++;\r\n    this.runningTime = 0;\r\n    this.activated = true;\r\n    this.crashed = false;\r\n    this.distanceRan = 0;\r\n    this.setSpeed(this.config.SPEED);\r\n    this.time = getTimeStamp();\r\n    this.containerEl.classList.remove(Runner.classes.CRASHED);\r\n    this.clearCanvas();\r\n    this.distanceMeter.reset(this.highestScore);\r\n    this.horizon.reset();\r\n    this.tRex.reset();\r\n    this.playSound(this.soundFx.BUTTON_PRESS);\r\n    this.update();\r\n    }\r\n    },\r\n    \/**\r\n    * Pause the game if the tab is not in focus.\r\n    *\/\r\n    onVisibilityChange: function(e) {\r\n    if (document.hidden || document.webkitHidden || e.type == 'blur') {\r\n    this.stop();\r\n    } else {\r\n    this.play();\r\n    }\r\n    },\r\n    \/**\r\n    * Play a sound.\r\n    * @param {SoundBuffer} soundBuffer\r\n    *\/\r\n    playSound: function(soundBuffer) {\r\n    if (soundBuffer) {\r\n    var sourceNode = this.audioContext.createBufferSource();\r\n    sourceNode.buffer = soundBuffer;\r\n    sourceNode.connect(this.audioContext.destination);\r\n    sourceNode.start(0);\r\n    }\r\n    }\r\n    };\r\n    \/**\r\n    * Updates the canvas size taking into\r\n    * account the backing store pixel ratio and\r\n    * the device pixel ratio.\r\n    *\r\n    * See article by Paul Lewis:\r\n    * https:\/\/www.html5rocks.com\/en\/tutorials\/canvas\/hidpi\/\r\n    *\r\n    * @param {HTMLCanvasElement} canvas\r\n    * @param {number} opt_width\r\n    * @param {number} opt_height\r\n    * @return {boolean} Whether the canvas was scaled.\r\n    *\/\r\n    Runner.updateCanvasScaling = function(canvas, opt_width, opt_height) {\r\n    var context = canvas.getContext('2d');\r\n    \/\/ Query the various pixel ratios\r\n    var devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\r\n    var backingStoreRatio = Math.floor(context.webkitBackingStorePixelRatio) || 1;\r\n    var ratio = devicePixelRatio \/ backingStoreRatio;\r\n    \/\/ Upscale the canvas if the two ratios don't match\r\n    if (devicePixelRatio !== backingStoreRatio) {\r\n    var oldWidth = opt_width || canvas.width;\r\n    var oldHeight = opt_height || canvas.height;\r\n    canvas.width = oldWidth * ratio;\r\n    canvas.height = oldHeight * ratio;\r\n    canvas.style.width = oldWidth + 'px';\r\n    canvas.style.height = oldHeight + 'px';\r\n    \/\/ Scale the context to counter the fact that we've manually scaled\r\n    \/\/ our canvas element.\r\n    context.scale(ratio, ratio);\r\n    return true;\r\n    }\r\n    return false;\r\n    };\r\n    \/**\r\n    * Get random number.\r\n    * @param {number} min\r\n    * @param {number} max\r\n    * @param {number}\r\n    *\/\r\n    function getRandomNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    \/**\r\n    * Vibrate on mobile devices.\r\n    * @param {number} duration Duration of the vibration in milliseconds.\r\n    *\/\r\n    function vibrate(duration) {\r\n    if (IS_MOBILE && window.navigator.vibrate) {\r\n    window.navigator.vibrate(duration);\r\n    }\r\n    }\r\n    \/**\r\n    * Create canvas element.\r\n    * @param {HTMLElement} container Element to append canvas to.\r\n    * @param {number} width\r\n    * @param {number} height\r\n    * @param {string} opt_classname\r\n    * @return {HTMLCanvasElement}\r\n    *\/\r\n    function createCanvas(container, width, height, opt_classname) {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.className = opt_classname ? Runner.classes.CANVAS + ' ' +\r\n    opt_classname : Runner.classes.CANVAS;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    container.appendChild(canvas);\r\n    return canvas;\r\n    }\r\n    \/**\r\n    * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\r\n    * @param {string} base64String\r\n    *\/\r\n    function decodeBase64ToArrayBuffer(base64String) {\r\n    var len = (base64String.length \/ 4) * 3;\r\n    var str = atob(base64String);\r\n    var arrayBuffer = new ArrayBuffer(len);\r\n    var bytes = new Uint8Array(arrayBuffer);\r\n    for (var i = 0; i < len; i++) {\r\n    bytes[i] = str.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n    }\r\n    \/**\r\n    * Return the current timestamp.\r\n    * @return {number}\r\n    *\/\r\n    function getTimeStamp() {\r\n    return IS_IOS ? new Date().getTime() : performance.now();\r\n    }\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Game over panel.\r\n    * @param {!HTMLCanvasElement} canvas\r\n    * @param {!HTMLImage} textSprite\r\n    * @param {!HTMLImage} restartImg\r\n    * @param {!Object} dimensions Canvas dimensions.\r\n    * @constructor\r\n    *\/\r\n    function GameOverPanel(canvas, textSprite, restartImg, dimensions) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx = canvas.getContext('2d');\r\n    this.canvasDimensions = dimensions;\r\n    this.textSprite = textSprite;\r\n    this.restartImg = restartImg;\r\n    this.draw();\r\n    };\r\n    \/**\r\n    * Dimensions used in the panel.\r\n    * @enum {number}\r\n    *\/\r\n    GameOverPanel.dimensions = {\r\n    TEXT_X: 0,\r\n    TEXT_Y: 13,\r\n    TEXT_WIDTH: 191,\r\n    TEXT_HEIGHT: 11,\r\n    RESTART_WIDTH: 36,\r\n    RESTART_HEIGHT: 32\r\n    };\r\n    GameOverPanel.prototype = {\r\n    \/**\r\n    * Update the panel dimensions.\r\n    * @param {number} width New canvas width.\r\n    * @param {number} opt_height Optional new canvas height.\r\n    *\/\r\n    updateDimensions: function(width, opt_height) {\r\n    this.canvasDimensions.WIDTH = width;\r\n    if (opt_height) {\r\n    this.canvasDimensions.HEIGHT = opt_height;\r\n    }\r\n    },\r\n    \/**\r\n    * Draw the panel.\r\n    *\/\r\n    draw: function() {\r\n    var dimensions = GameOverPanel.dimensions;\r\n    var centerX = this.canvasDimensions.WIDTH \/ 2;\r\n    \/\/ Game over text.\r\n    var textSourceX = dimensions.TEXT_X;\r\n    var textSourceY = dimensions.TEXT_Y;\r\n    var textSourceWidth = dimensions.TEXT_WIDTH;\r\n    var textSourceHeight = dimensions.TEXT_HEIGHT;\r\n    var textTargetX = Math.round(centerX - (dimensions.TEXT_WIDTH \/ 2));\r\n    var textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) \/ 3);\r\n    var textTargetWidth = dimensions.TEXT_WIDTH;\r\n    var textTargetHeight = dimensions.TEXT_HEIGHT;\r\n    var restartSourceWidth = dimensions.RESTART_WIDTH;\r\n    var restartSourceHeight = dimensions.RESTART_HEIGHT;\r\n    var restartTargetX = centerX - (dimensions.RESTART_WIDTH \/ 2);\r\n    var restartTargetY = this.canvasDimensions.HEIGHT \/ 2;\r\n    if (IS_HIDPI) {\r\n    textSourceY *= 2;\r\n    textSourceX *= 2;\r\n    textSourceWidth *= 2;\r\n    textSourceHeight *= 2;\r\n    restartSourceWidth *= 2;\r\n    restartSourceHeight *= 2;\r\n    }\r\n    \/\/ Game over text from sprite.\r\n    this.canvasCtx.drawImage(this.textSprite,\r\n    textSourceX, textSourceY, textSourceWidth, textSourceHeight,\r\n    textTargetX, textTargetY, textTargetWidth, textTargetHeight);\r\n    \/\/ Restart button.\r\n    this.canvasCtx.drawImage(this.restartImg, 0, 0,\r\n    restartSourceWidth, restartSourceHeight,\r\n    restartTargetX, restartTargetY, dimensions.RESTART_WIDTH,\r\n    dimensions.RESTART_HEIGHT);\r\n    }\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Check for a collision.\r\n    * @param {!Obstacle} obstacle\r\n    * @param {!Trex} tRex T-rex object.\r\n    * @param {HTMLCanvasContext} opt_canvasCtx Optional canvas context for drawing\r\n    * collision boxes.\r\n    * @return {Array.<CollisionBox>}\r\n    *\/\r\n    function checkForCollision(obstacle, tRex, opt_canvasCtx) {\r\n    var obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\r\n    \/\/ Adjustments are made to the bounding box as there is a 1 pixel white\r\n    \/\/ border around the t-rex and obstacles.\r\n    var tRexBox = new CollisionBox(\r\n    tRex.xPos + 1,\r\n    tRex.yPos + 1,\r\n    tRex.config.WIDTH - 2,\r\n    tRex.config.HEIGHT - 2);\r\n    var obstacleBox = new CollisionBox(\r\n    obstacle.xPos + 1,\r\n    obstacle.yPos + 1,\r\n    obstacle.typeConfig.width * obstacle.size - 2,\r\n    obstacle.typeConfig.height - 2);\r\n    \/\/ Debug outer box\r\n    if (opt_canvasCtx) {\r\n    drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\r\n    }\r\n    \/\/ Simple outer bounds check.\r\n    if (boxCompare(tRexBox, obstacleBox)) {\r\n    var collisionBoxes = obstacle.collisionBoxes;\r\n    var tRexCollisionBoxes = Trex.collisionBoxes;\r\n    \/\/ Detailed axis aligned box check.\r\n    for (var t = 0; t < tRexCollisionBoxes.length; t++) {\r\n    for (var i = 0; i < collisionBoxes.length; i++) {\r\n    \/\/ Adjust the box to actual positions.\r\n    var adjTrexBox =\r\n    createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\r\n    var adjObstacleBox =\r\n    createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\r\n    var crashed = boxCompare(adjTrexBox, adjObstacleBox);\r\n    \/\/ Draw boxes for debug.\r\n    if (opt_canvasCtx) {\r\n    drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\r\n    }\r\n    if (crashed) {\r\n    return [adjTrexBox, adjObstacleBox];\r\n    }\r\n    }\r\n    }\r\n    }\r\n    return false;\r\n    };\r\n    \/**\r\n    * Adjust the collision box.\r\n    * @param {!CollisionBox} box The original box.\r\n    * @param {!CollisionBox} adjustment Adjustment box.\r\n    * @return {CollisionBox} The adjusted collision box object.\r\n    *\/\r\n    function createAdjustedCollisionBox(box, adjustment) {\r\n    return new CollisionBox(\r\n    box.x + adjustment.x,\r\n    box.y + adjustment.y,\r\n    box.width,\r\n    box.height);\r\n    };\r\n    \/**\r\n    * Draw the collision boxes for debug.\r\n    *\/\r\n    function drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\r\n    canvasCtx.save();\r\n    canvasCtx.strokeStyle = '#f00';\r\n    canvasCtx.strokeRect(tRexBox.x, tRexBox.y,\r\n    tRexBox.width, tRexBox.height);\r\n    canvasCtx.strokeStyle = '#0f0';\r\n    canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y,\r\n    obstacleBox.width, obstacleBox.height);\r\n    canvasCtx.restore();\r\n    };\r\n    \/**\r\n    * Compare two collision boxes for a collision.\r\n    * @param {CollisionBox} tRexBox\r\n    * @param {CollisionBox} obstacleBox\r\n    * @return {boolean} Whether the boxes intersected.\r\n    *\/\r\n    function boxCompare(tRexBox, obstacleBox) {\r\n    var crashed = false;\r\n    var tRexBoxX = tRexBox.x;\r\n    var tRexBoxY = tRexBox.y;\r\n    var obstacleBoxX = obstacleBox.x;\r\n    var obstacleBoxY = obstacleBox.y;\r\n    \/\/ Axis-Aligned Bounding Box method.\r\n    if (tRexBox.x < obstacleBoxX + obstacleBox.width &&\r\n    tRexBox.x + tRexBox.width > obstacleBoxX &&\r\n    tRexBox.y < obstacleBox.y + obstacleBox.height &&\r\n    tRexBox.height + tRexBox.y > obstacleBox.y) {\r\n    crashed = true;\r\n    }\r\n    return crashed;\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Collision box object.\r\n    * @param {number} x X position.\r\n    * @param {number} y Y Position.\r\n    * @param {number} w Width.\r\n    * @param {number} h Height.\r\n    *\/\r\n    function CollisionBox(x, y, w, h) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Obstacle.\r\n    * @param {HTMLCanvasCtx} canvasCtx\r\n    * @param {Obstacle.type} type\r\n    * @param {image} obstacleImg Image sprite.\r\n    * @param {Object} dimensions\r\n    * @param {number} gapCoefficient Mutipler in determining the gap.\r\n    * @param {number} speed\r\n    *\/\r\n    function Obstacle(canvasCtx, type, obstacleImg, dimensions,\r\n    gapCoefficient, speed) {\r\n    this.canvasCtx = canvasCtx;\r\n    this.image = obstacleImg;\r\n    this.typeConfig = type;\r\n    this.gapCoefficient = gapCoefficient;\r\n    this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\r\n    this.dimensions = dimensions;\r\n    this.remove = false;\r\n    this.xPos = 0;\r\n    this.yPos = this.typeConfig.yPos;\r\n    this.width = 0;\r\n    this.collisionBoxes = [];\r\n    this.gap = 0;\r\n    this.init(speed);\r\n    };\r\n    \/**\r\n    * Coefficient for calculating the maximum gap.\r\n    * @const\r\n    *\/\r\n    Obstacle.MAX_GAP_COEFFICIENT = 1.5;\r\n    \/**\r\n    * Maximum obstacle grouping count.\r\n    * @const\r\n    *\/\r\n    Obstacle.MAX_OBSTACLE_LENGTH = 3,\r\n    Obstacle.prototype = {\r\n    \/**\r\n    * Initialise the DOM for the obstacle.\r\n    * @param {number} speed\r\n    *\/\r\n    init: function(speed) {\r\n    this.cloneCollisionBoxes();\r\n    \/\/ Only allow sizing if we're at the right speed.\r\n    if (this.size > 1 && this.typeConfig.multipleSpeed > speed) {\r\n    this.size = 1;\r\n    }\r\n    this.width = this.typeConfig.width * this.size;\r\n    this.xPos = this.dimensions.WIDTH - this.width;\r\n    this.draw();\r\n    \/\/ Make collision box adjustments,\r\n    \/\/ Central box is adjusted to the size as one box.\r\n    \/\/ ____ ______ ________\r\n    \/\/ _| |-| _| |-| _| |-|\r\n    \/\/ | |<->| | | |<--->| | | |<----->| |\r\n    \/\/ | | 1 | | | | 2 | | | | 3 | |\r\n    \/\/ |_|___|_| |_|_____|_| |_|_______|_|\r\n    \/\/\r\n    if (this.size > 1) {\r\n    this.collisionBoxes[1].width = this.width - this.collisionBoxes[0].width -\r\n    this.collisionBoxes[2].width;\r\n    this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\r\n    }\r\n    this.gap = this.getGap(this.gapCoefficient, speed);\r\n    },\r\n    \/**\r\n    * Draw and crop based on size.\r\n    *\/\r\n    draw: function() {\r\n    var sourceWidth = this.typeConfig.width;\r\n    var sourceHeight = this.typeConfig.height;\r\n    if (IS_HIDPI) {\r\n    sourceWidth = sourceWidth * 2;\r\n    sourceHeight = sourceHeight * 2;\r\n    }\r\n    \/\/ Sprite\r\n    var sourceX = (sourceWidth * this.size) * (0.5 * (this.size - 1));\r\n    this.canvasCtx.drawImage(this.image,\r\n    sourceX, 0,\r\n    sourceWidth * this.size, sourceHeight,\r\n    this.xPos, this.yPos,\r\n    this.typeConfig.width * this.size, this.typeConfig.height);\r\n    },\r\n    \/**\r\n    * Obstacle frame update.\r\n    * @param {number} deltaTime\r\n    * @param {number} speed\r\n    *\/\r\n    update: function(deltaTime, speed) {\r\n    if (!this.remove) {\r\n    this.xPos -= Math.floor((speed * FPS \/ 1000) * deltaTime);\r\n    this.draw();\r\n    if (!this.isVisible()) {\r\n    this.remove = true;\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Calculate a random gap size.\r\n    * - Minimum gap gets wider as speed increses\r\n    * @param {number} gapCoefficient\r\n    * @param {number} speed\r\n    * @return {number} The gap size.\r\n    *\/\r\n    getGap: function(gapCoefficient, speed) {\r\n    var minGap = Math.round(this.width * speed +\r\n    this.typeConfig.minGap * gapCoefficient);\r\n    var maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\r\n    return getRandomNum(minGap, maxGap);\r\n    },\r\n    \/**\r\n    * Check if obstacle is visible.\r\n    * @return {boolean} Whether the obstacle is in the game area.\r\n    *\/\r\n    isVisible: function() {\r\n    return this.xPos + this.width > 0;\r\n    },\r\n    \/**\r\n    * Make a copy of the collision boxes, since these will change based on\r\n    * obstacle type and size.\r\n    *\/\r\n    cloneCollisionBoxes: function() {\r\n    var collisionBoxes = this.typeConfig.collisionBoxes;\r\n    for (var i = collisionBoxes.length - 1; i >= 0; i--) {\r\n    this.collisionBoxes[i] = new CollisionBox(collisionBoxes[i].x,\r\n    collisionBoxes[i].y, collisionBoxes[i].width,\r\n    collisionBoxes[i].height);\r\n    }\r\n    }\r\n    };\r\n    \/**\r\n    * Obstacle definitions.\r\n    * minGap: minimum pixel space betweeen obstacles.\r\n    * multipleSpeed: Speed at which multiples are allowed.\r\n    *\/\r\n    Obstacle.types = [\r\n    {\r\n    type: 'CACTUS_SMALL',\r\n    className: ' cactus cactus-small ',\r\n    width: 17,\r\n    height: 35,\r\n    yPos: 105,\r\n    multipleSpeed: 3,\r\n    minGap: 120,\r\n    collisionBoxes: [\r\n    new CollisionBox(0, 7, 5, 27),\r\n    new CollisionBox(4, 0, 6, 34),\r\n    new CollisionBox(10, 4, 7, 14)\r\n    ]\r\n    },\r\n    {\r\n    type: 'CACTUS_LARGE',\r\n    className: ' cactus cactus-large ',\r\n    width: 25,\r\n    height: 50,\r\n    yPos: 90,\r\n    multipleSpeed: 6,\r\n    minGap: 120,\r\n    collisionBoxes: [\r\n    new CollisionBox(0, 12, 7, 38),\r\n    new CollisionBox(8, 0, 7, 49),\r\n    new CollisionBox(13, 10, 10, 38)\r\n    ]\r\n    }\r\n    ];\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * T-rex game character.\r\n    * @param {HTMLCanvas} canvas\r\n    * @param {HTMLImage} image Character image.\r\n    * @constructor\r\n    *\/\r\n    function Trex(canvas, image) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx = canvas.getContext('2d');\r\n    this.image = image;\r\n    this.xPos = 0;\r\n    this.yPos = 0;\r\n    \/\/ Position when on the ground.\r\n    this.groundYPos = 0;\r\n    this.currentFrame = 0;\r\n    this.currentAnimFrames = [];\r\n    this.blinkDelay = 0;\r\n    this.animStartTime = 0;\r\n    this.timer = 0;\r\n    this.msPerFrame = 1000 \/ FPS;\r\n    this.config = Trex.config;\r\n    \/\/ Current status.\r\n    this.status = Trex.status.WAITING;\r\n    this.jumping = false;\r\n    this.jumpVelocity = 0;\r\n    this.reachedMinHeight = false;\r\n    this.speedDrop = false;\r\n    this.jumpCount = 0;\r\n    this.jumpspotX = 0;\r\n    this.init();\r\n    };\r\n    \/**\r\n    * T-rex player config.\r\n    * @enum {number}\r\n    *\/\r\n    Trex.config = {\r\n    DROP_VELOCITY: -5,\r\n    GRAVITY: 0.6,\r\n    HEIGHT: 47,\r\n    INIITAL_JUMP_VELOCITY: -10,\r\n    INTRO_DURATION: 1500,\r\n    MAX_JUMP_HEIGHT: 30,\r\n    MIN_JUMP_HEIGHT: 30,\r\n    SPEED_DROP_COEFFICIENT: 3,\r\n    SPRITE_WIDTH: 262,\r\n    START_X_POS: 50,\r\n    WIDTH: 44\r\n    };\r\n    \/**\r\n    * Used in collision detection.\r\n    * @type {Array.<CollisionBox>}\r\n    *\/\r\n    Trex.collisionBoxes = [\r\n    new CollisionBox(1, -1, 30, 26),\r\n    new CollisionBox(32, 0, 8, 16),\r\n    new CollisionBox(10, 35, 14, 8),\r\n    new CollisionBox(1, 24, 29, 5),\r\n    new CollisionBox(5, 30, 21, 4),\r\n    new CollisionBox(9, 34, 15, 4)\r\n    ];\r\n    \/**\r\n    * Animation states.\r\n    * @enum {string}\r\n    *\/\r\n    Trex.status = {\r\n    CRASHED: 'CRASHED',\r\n    JUMPING: 'JUMPING',\r\n    RUNNING: 'RUNNING',\r\n    WAITING: 'WAITING'\r\n    };\r\n    \/**\r\n    * Blinking coefficient.\r\n    * @const\r\n    *\/\r\n    Trex.BLINK_TIMING = 7000;\r\n    \/**\r\n    * Animation config for different states.\r\n    * @enum {object}\r\n    *\/\r\n    Trex.animFrames = {\r\n    WAITING: {\r\n    frames: [44, 0],\r\n    msPerFrame: 1000 \/ 3\r\n    },\r\n    RUNNING: {\r\n    frames: [88, 132],\r\n    msPerFrame: 1000 \/ 12\r\n    },\r\n    CRASHED: {\r\n    frames: [220],\r\n    msPerFrame: 1000 \/ 60\r\n    },\r\n    JUMPING: {\r\n    frames: [0],\r\n    msPerFrame: 1000 \/ 60\r\n    }\r\n    };\r\n    Trex.prototype = {\r\n    \/**\r\n    * T-rex player initaliser.\r\n    * Sets the t-rex to blink at random intervals.\r\n    *\/\r\n    init: function() {\r\n    this.blinkDelay = this.setBlinkDelay();\r\n    this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\r\n    Runner.config.BOTTOM_PAD;\r\n    this.yPos = this.groundYPos;\r\n    this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\r\n    this.draw(0, 0);\r\n    this.update(0, Trex.status.WAITING);\r\n    },\r\n    \/**\r\n    * Setter for the jump velocity.\r\n    * The approriate drop velocity is also set.\r\n    *\/\r\n    setJumpVelocity: function(setting) {\r\n    this.config.INIITAL_JUMP_VELOCITY = -setting;\r\n    this.config.DROP_VELOCITY = -setting \/ 2;\r\n    },\r\n    \/**\r\n    * Set the animation status.\r\n    * @param {!number} deltaTime\r\n    * @param {Trex.status} status Optional status to switch to.\r\n    *\/\r\n    update: function(deltaTime, opt_status) {\r\n    this.timer += deltaTime;\r\n    \/\/ Update the status.\r\n    if (opt_status) {\r\n    this.status = opt_status;\r\n    this.currentFrame = 0;\r\n    this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\r\n    this.currentAnimFrames = Trex.animFrames[opt_status].frames;\r\n    if (opt_status == Trex.status.WAITING) {\r\n    this.animStartTime = getTimeStamp();\r\n    this.setBlinkDelay();\r\n    }\r\n    }\r\n    \/\/ Game intro animation, T-rex moves in from the left.\r\n    if (this.playingIntro && this.xPos < this.config.START_X_POS) {\r\n    this.xPos += Math.round((this.config.START_X_POS \/\r\n    this.config.INTRO_DURATION) * deltaTime);\r\n    }\r\n    if (this.status == Trex.status.WAITING) {\r\n    this.blink(getTimeStamp());\r\n    } else {\r\n    this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n    }\r\n    \/\/ Update the frame position.\r\n    if (this.timer >= this.msPerFrame) {\r\n    this.currentFrame = this.currentFrame ==\r\n    this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\r\n    this.timer = 0;\r\n    }\r\n    },\r\n    \/**\r\n    * Draw the t-rex to a particular position.\r\n    * @param {number} x\r\n    * @param {number} y\r\n    *\/\r\n    draw: function(x, y) {\r\n    var sourceX = x;\r\n    var sourceY = y;\r\n    var sourceWidth = this.config.WIDTH;\r\n    var sourceHeight = this.config.HEIGHT;\r\n    if (IS_HIDPI) {\r\n    sourceX *= 2;\r\n    sourceY *= 2;\r\n    sourceWidth *= 2;\r\n    sourceHeight *= 2;\r\n    }\r\n    this.canvasCtx.drawImage(this.image, sourceX, sourceY,\r\n    sourceWidth, sourceHeight,\r\n    this.xPos, this.yPos,\r\n    this.config.WIDTH, this.config.HEIGHT);\r\n    },\r\n    \/**\r\n    * Sets a random time for the blink to happen.\r\n    *\/\r\n    setBlinkDelay: function() {\r\n    this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\r\n    },\r\n    \/**\r\n    * Make t-rex blink at random intervals.\r\n    * @param {number} time Current time in milliseconds.\r\n    *\/\r\n    blink: function(time) {\r\n    var deltaTime = time - this.animStartTime;\r\n    if (deltaTime >= this.blinkDelay) {\r\n    this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n    if (this.currentFrame == 1) {\r\n    \/\/ Set new random delay to blink.\r\n    this.setBlinkDelay();\r\n    this.animStartTime = time;\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Initialise a jump.\r\n    *\/\r\n    startJump: function() {\r\n    if (!this.jumping) {\r\n    this.update(0, Trex.status.JUMPING);\r\n    this.jumpVelocity = this.config.INIITAL_JUMP_VELOCITY;\r\n    this.jumping = true;\r\n    this.reachedMinHeight = false;\r\n    this.speedDrop = false;\r\n    }\r\n    },\r\n    \/**\r\n    * Jump is complete, falling down.\r\n    *\/\r\n    endJump: function() {\r\n    if (this.reachedMinHeight &&\r\n    this.jumpVelocity < this.config.DROP_VELOCITY) {\r\n    this.jumpVelocity = this.config.DROP_VELOCITY;\r\n    }\r\n    },\r\n    \/**\r\n    * Update frame for a jump.\r\n    * @param {number} deltaTime\r\n    *\/\r\n    updateJump: function(deltaTime) {\r\n    var msPerFrame = Trex.animFrames[this.status].msPerFrame;\r\n    var framesElapsed = deltaTime \/ msPerFrame;\r\n    \/\/ Speed drop makes Trex fall faster.\r\n    if (this.speedDrop) {\r\n    this.yPos += Math.round(this.jumpVelocity *\r\n    this.config.SPEED_DROP_COEFFICIENT * framesElapsed);\r\n    } else {\r\n    this.yPos += Math.round(this.jumpVelocity * framesElapsed);\r\n    }\r\n    this.jumpVelocity += this.config.GRAVITY * framesElapsed;\r\n    \/\/ Minimum height has been reached.\r\n    if (this.yPos < this.minJumpHeight || this.speedDrop) {\r\n    this.reachedMinHeight = true;\r\n    }\r\n    \/\/ Reached max height\r\n    if (this.yPos < this.config.MAX_JUMP_HEIGHT || this.speedDrop) {\r\n    this.endJump();\r\n    }\r\n    \/\/ Back down at ground level. Jump completed.\r\n    if (this.yPos > this.groundYPos) {\r\n    this.reset();\r\n    this.jumpCount++;\r\n    }\r\n    this.update(deltaTime);\r\n    },\r\n    \/**\r\n    * Set the speed drop. Immediately cancels the current jump.\r\n    *\/\r\n    setSpeedDrop: function() {\r\n    this.speedDrop = true;\r\n    this.jumpVelocity = 1;\r\n    },\r\n    \/**\r\n    * Reset the t-rex to running at start of game.\r\n    *\/\r\n    reset: function() {\r\n    this.yPos = this.groundYPos;\r\n    this.jumpVelocity = 0;\r\n    this.jumping = false;\r\n    this.update(0, Trex.status.RUNNING);\r\n    this.midair = false;\r\n    this.speedDrop = false;\r\n    this.jumpCount = 0;\r\n    }\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Handles displaying the distance meter.\r\n    * @param {!HTMLCanvasElement} canvas\r\n    * @param {!HTMLImage} spriteSheet Image sprite.\r\n    * @param {number} canvasWidth\r\n    * @constructor\r\n    *\/\r\n    function DistanceMeter(canvas, spriteSheet, canvasWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx = canvas.getContext('2d');\r\n    this.image = spriteSheet;\r\n    this.x = 0;\r\n    this.y = 5;\r\n    this.currentDistance = 0;\r\n    this.maxScore = 0;\r\n    this.highScore = 0;\r\n    this.container = null;\r\n    this.digits = [];\r\n    this.acheivement = false;\r\n    this.defaultString = '';\r\n    this.flashTimer = 0;\r\n    this.flashIterations = 0;\r\n    this.config = DistanceMeter.config;\r\n    this.init(canvasWidth);\r\n    };\r\n    \/**\r\n    * @enum {number}\r\n    *\/\r\n    DistanceMeter.dimensions = {\r\n    WIDTH: 10,\r\n    HEIGHT: 13,\r\n    DEST_WIDTH: 11\r\n    };\r\n    \/**\r\n    * Y positioning of the digits in the sprite sheet.\r\n    * X position is always 0.\r\n    * @type {array.<number>}\r\n    *\/\r\n    DistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\r\n    \/**\r\n    * Distance meter config.\r\n    * @enum {number}\r\n    *\/\r\n    DistanceMeter.config = {\r\n    \/\/ Number of digits.\r\n    MAX_DISTANCE_UNITS: 5,\r\n    \/\/ Distance that causes achievement animation.\r\n    ACHIEVEMENT_DISTANCE: 100,\r\n    \/\/ Used for conversion from pixel distance to a scaled unit.\r\n    COEFFICIENT: 0.025,\r\n    \/\/ Flash duration in milliseconds.\r\n    FLASH_DURATION: 1000 \/ 4,\r\n    \/\/ Flash iterations for achievement animation.\r\n    FLASH_ITERATIONS: 3\r\n    };\r\n    DistanceMeter.prototype = {\r\n    \/**\r\n    * Initialise the distance meter to '00000'.\r\n    * @param {number} width Canvas width in px.\r\n    *\/\r\n    init: function(width) {\r\n    var maxDistanceStr = '';\r\n    this.calcXPos(width);\r\n    this.maxScore = this.config.MAX_DISTANCE_UNITS;\r\n    for (var i = 0; i < this.config.MAX_DISTANCE_UNITS; i++) {\r\n    this.draw(i, 0);\r\n    this.defaultString += '0';\r\n    maxDistanceStr += '9';\r\n    }\r\n    this.maxScore = parseInt(maxDistanceStr);\r\n    },\r\n    \/**\r\n    * Calculate the xPos in the canvas.\r\n    * @param {number} canvasWidth\r\n    *\/\r\n    calcXPos: function(canvasWidth) {\r\n    this.x = canvasWidth - (DistanceMeter.dimensions.DEST_WIDTH *\r\n    (this.config.MAX_DISTANCE_UNITS + 1));\r\n    },\r\n    \/**\r\n    * Draw a digit to canvas.\r\n    * @param {number} digitPos Position of the digit.\r\n    * @param {number} value Digit value 0-9.\r\n    * @param {boolean} opt_highScore Whether drawing the high score.\r\n    *\/\r\n    draw: function(digitPos, value, opt_highScore) {\r\n    var sourceWidth = DistanceMeter.dimensions.WIDTH;\r\n    var sourceHeight = DistanceMeter.dimensions.HEIGHT;\r\n    var sourceX = DistanceMeter.dimensions.WIDTH * value;\r\n    var targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\r\n    var targetY = this.y;\r\n    var targetWidth = DistanceMeter.dimensions.WIDTH;\r\n    var targetHeight = DistanceMeter.dimensions.HEIGHT;\r\n    \/\/ For high DPI we 2x source values.\r\n    if (IS_HIDPI) {\r\n    sourceWidth *= 2;\r\n    sourceHeight *= 2;\r\n    sourceX *= 2;\r\n    }\r\n    this.canvasCtx.save();\r\n    if (opt_highScore) {\r\n    \/\/ Left of the current score.\r\n    var highScoreX = this.x - (this.config.MAX_DISTANCE_UNITS * 2) *\r\n    DistanceMeter.dimensions.WIDTH;\r\n    this.canvasCtx.translate(highScoreX, this.y);\r\n    } else {\r\n    this.canvasCtx.translate(this.x, this.y);\r\n    }\r\n    this.canvasCtx.drawImage(this.image, sourceX, 0,\r\n    sourceWidth, sourceHeight,\r\n    targetX, targetY,\r\n    targetWidth, targetHeight\r\n    );\r\n    this.canvasCtx.restore();\r\n    },\r\n    \/**\r\n    * Covert pixel distance to a 'real' distance.\r\n    * @param {number} distance Pixel distance ran.\r\n    * @return {number} The 'real' distance ran.\r\n    *\/\r\n    getActualDistance: function(distance) {\r\n    return distance ?\r\n    Math.round(distance * this.config.COEFFICIENT) : 0;\r\n    },\r\n    \/**\r\n    * Update the distance meter.\r\n    * @param {number} deltaTime\r\n    * @param {number} distance\r\n    * @return {boolean} Whether the acheivement sound fx should be played.\r\n    *\/\r\n    update: function(deltaTime, distance) {\r\n    var paint = true;\r\n    var playSound = false;\r\n    if (!this.acheivement) {\r\n    distance = this.getActualDistance(distance);\r\n    if (distance > 0) {\r\n    \/\/ Acheivement unlocked\r\n    if (distance % this.config.ACHIEVEMENT_DISTANCE == 0) {\r\n    \/\/ Flash score and play sound.\r\n    this.acheivement = true;\r\n    this.flashTimer = 0;\r\n    playSound = true;\r\n    }\r\n    \/\/ Create a string representation of the distance with leading 0.\r\n    var distanceStr = (this.defaultString +\r\n    distance).substr(-this.config.MAX_DISTANCE_UNITS);\r\n    this.digits = distanceStr.split('');\r\n    } else {\r\n    this.digits = this.defaultString.split('');\r\n    }\r\n    } else {\r\n    \/\/ Control flashing of the score on reaching acheivement.\r\n    if (this.flashIterations <= this.config.FLASH_ITERATIONS) {\r\n    this.flashTimer += deltaTime;\r\n    if (this.flashTimer < this.config.FLASH_DURATION) {\r\n    paint = false;\r\n    } else if (this.flashTimer >\r\n    this.config.FLASH_DURATION * 2) {\r\n    this.flashTimer = 0;\r\n    this.flashIterations++;\r\n    }\r\n    } else {\r\n    this.acheivement = false;\r\n    this.flashIterations = 0;\r\n    this.flashTimer = 0;\r\n    }\r\n    }\r\n    \/\/ Draw the digits if not flashing.\r\n    if (paint) {\r\n    for (var i = this.digits.length - 1; i >= 0; i--) {\r\n    this.draw(i, parseInt(this.digits[i]));\r\n    }\r\n    }\r\n    this.drawHighScore();\r\n    return playSound;\r\n    },\r\n    \/**\r\n    * Draw the high score.\r\n    *\/\r\n    drawHighScore: function() {\r\n    this.canvasCtx.save();\r\n    this.canvasCtx.globalAlpha = .8;\r\n    for (var i = this.highScore.length - 1; i >= 0; i--) {\r\n    this.draw(i, parseInt(this.highScore[i], 10), true);\r\n    }\r\n    this.canvasCtx.restore();\r\n    },\r\n    \/**\r\n    * Set the highscore as a array string.\r\n    * Position of char in the sprite: H - 10, I - 11.\r\n    * @param {number} distance Distance ran in pixels.\r\n    *\/\r\n    setHighScore: function(distance) {\r\n    distance = this.getActualDistance(distance);\r\n    var highScoreStr = (this.defaultString +\r\n    distance).substr(-this.config.MAX_DISTANCE_UNITS);\r\n    this.highScore = ['10', '11', ''].concat(highScoreStr.split(''));\r\n    },\r\n    \/**\r\n    * Reset the distance meter back to '00000'.\r\n    *\/\r\n    reset: function() {\r\n    this.update(0);\r\n    this.acheivement = false;\r\n    }\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Cloud background item.\r\n    * Similar to an obstacle object but without collision boxes.\r\n    * @param {HTMLCanvasElement} canvas Canvas element.\r\n    * @param {Image} cloudImg\r\n    * @param {number} containerWidth\r\n    *\/\r\n    function Cloud(canvas, cloudImg, containerWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx = this.canvas.getContext('2d');\r\n    this.image = cloudImg;\r\n    this.containerWidth = containerWidth;\r\n    this.xPos = containerWidth;\r\n    this.yPos = 0;\r\n    this.remove = false;\r\n    this.cloudGap = getRandomNum(Cloud.config.MIN_CLOUD_GAP,\r\n    Cloud.config.MAX_CLOUD_GAP);\r\n    this.init();\r\n    };\r\n    \/**\r\n    * Cloud object config.\r\n    * @enum {number}\r\n    *\/\r\n    Cloud.config = {\r\n    HEIGHT: 14,\r\n    MAX_CLOUD_GAP: 400,\r\n    MAX_SKY_LEVEL: 30,\r\n    MIN_CLOUD_GAP: 100,\r\n    MIN_SKY_LEVEL: 71,\r\n    WIDTH: 46\r\n    };\r\n    Cloud.prototype = {\r\n    \/**\r\n    * Initialise the cloud. Sets the Cloud height.\r\n    *\/\r\n    init: function() {\r\n    this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL,\r\n    Cloud.config.MIN_SKY_LEVEL);\r\n    this.draw();\r\n    },\r\n    \/**\r\n    * Draw the cloud.\r\n    *\/\r\n    draw: function() {\r\n    this.canvasCtx.save();\r\n    var sourceWidth = Cloud.config.WIDTH;\r\n    var sourceHeight = Cloud.config.HEIGHT;\r\n    if (IS_HIDPI) {\r\n    sourceWidth = sourceWidth * 2;\r\n    sourceHeight = sourceHeight * 2;\r\n    }\r\n    this.canvasCtx.drawImage(this.image, 0, 0,\r\n    sourceWidth, sourceHeight,\r\n    this.xPos, this.yPos,\r\n    Cloud.config.WIDTH, Cloud.config.HEIGHT);\r\n    this.canvasCtx.restore();\r\n    },\r\n    \/**\r\n    * Update the cloud position.\r\n    * @param {number} speed\r\n    *\/\r\n    update: function(speed) {\r\n    if (!this.remove) {\r\n    this.xPos -= Math.ceil(speed);\r\n    this.draw();\r\n    \/\/ Mark as removeable if no longer in the canvas.\r\n    if (!this.isVisible()) {\r\n    this.remove = true;\r\n    }\r\n    }\r\n    },\r\n    \/**\r\n    * Check if the cloud is visible on the stage.\r\n    * @return {boolean}\r\n    *\/\r\n    isVisible: function() {\r\n    return this.xPos + Cloud.config.WIDTH > 0;\r\n    }\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Horizon Line.\r\n    * Consists of two connecting lines. Randomly assigns a flat \/ bumpy horizon.\r\n    * @param {HTMLCanvasElement} canvas\r\n    * @param {HTMLImage} bgImg Horizon line sprite.\r\n    * @constructor\r\n    *\/\r\n    function HorizonLine(canvas, bgImg) {\r\n    this.image = bgImg;\r\n    this.canvas = canvas;\r\n    this.canvasCtx = canvas.getContext('2d');\r\n    this.sourceDimensions = {};\r\n    this.dimensions = HorizonLine.dimensions;\r\n    this.sourceXPos = [0, this.dimensions.WIDTH];\r\n    this.xPos = [];\r\n    this.yPos = 0;\r\n    this.bumpThreshold = 0.5;\r\n    this.setSourceDimensions();\r\n    this.draw();\r\n    };\r\n    \/**\r\n    * Horizon line dimensions.\r\n    * @enum {number}\r\n    *\/\r\n    HorizonLine.dimensions = {\r\n    WIDTH: 600,\r\n    HEIGHT: 12,\r\n    YPOS: 127\r\n    };\r\n    HorizonLine.prototype = {\r\n    \/**\r\n    * Set the source dimensions of the horizon line.\r\n    *\/\r\n    setSourceDimensions: function() {\r\n    for (var dimension in HorizonLine.dimensions) {\r\n    if (IS_HIDPI) {\r\n    if (dimension != 'YPOS') {\r\n    this.sourceDimensions[dimension] =\r\n    HorizonLine.dimensions[dimension] * 2;\r\n    }\r\n    } else {\r\n    this.sourceDimensions[dimension] =\r\n    HorizonLine.dimensions[dimension];\r\n    }\r\n    this.dimensions[dimension] = HorizonLine.dimensions[dimension];\r\n    }\r\n    this.xPos = [0, HorizonLine.dimensions.WIDTH];\r\n    this.yPos = HorizonLine.dimensions.YPOS;\r\n    },\r\n    \/**\r\n    * Return the crop x position of a type.\r\n    *\/\r\n    getRandomType: function() {\r\n    return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\r\n    },\r\n    \/**\r\n    * Draw the horizon line.\r\n    *\/\r\n    draw: function() {\r\n    this.canvasCtx.drawImage(this.image, this.sourceXPos[0], 0,\r\n    this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n    this.xPos[0], this.yPos,\r\n    this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n    this.canvasCtx.drawImage(this.image, this.sourceXPos[1], 0,\r\n    this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n    this.xPos[1], this.yPos,\r\n    this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n    },\r\n    \/**\r\n    * Update the x position of an indivdual piece of the line.\r\n    * @param {number} pos Line position.\r\n    * @param {number} increment\r\n    *\/\r\n    updateXPos: function(pos, increment) {\r\n    var line1 = pos;\r\n    var line2 = pos == 0 ? 1 : 0;\r\n    this.xPos[line1] -= increment;\r\n    this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\r\n    if (this.xPos[line1] <= -this.dimensions.WIDTH) {\r\n    this.xPos[line1] += this.dimensions.WIDTH * 2;\r\n    this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\r\n    this.sourceXPos[line1] = this.getRandomType();\r\n    }\r\n    },\r\n    \/**\r\n    * Update the horizon line.\r\n    * @param {number} deltaTime\r\n    * @param {number} speed\r\n    *\/\r\n    update: function(deltaTime, speed) {\r\n    var increment = Math.floor(speed * (FPS \/ 1000) * deltaTime);\r\n    if (this.xPos[0] <= 0) {\r\n    this.updateXPos(0, increment);\r\n    } else {\r\n    this.updateXPos(1, increment);\r\n    }\r\n    this.draw();\r\n    },\r\n    \/**\r\n    * Reset horizon to the starting position.\r\n    *\/\r\n    reset: function() {\r\n    this.xPos[0] = 0;\r\n    this.xPos[1] = HorizonLine.dimensions.WIDTH;\r\n    }\r\n    };\r\n    \/\/******************************************************************************\r\n    \/**\r\n    * Horizon background class.\r\n    * @param {HTMLCanvasElement} canvas\r\n    * @param {Array.<HTMLImageElement>} images\r\n    * @param {object} dimensions Canvas dimensions.\r\n    * @param {number} gapCoefficient\r\n    * @constructor\r\n    *\/\r\n    function Horizon(canvas, images, dimensions, gapCoefficient) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx = this.canvas.getContext('2d');\r\n    this.config = Horizon.config;\r\n    this.dimensions = dimensions;\r\n    this.gapCoefficient = gapCoefficient;\r\n    this.obstacles = [];\r\n    this.horizonOffsets = [0, 0];\r\n    this.cloudFrequency = this.config.CLOUD_FREQUENCY;\r\n    \/\/ Cloud\r\n    this.clouds = [];\r\n    this.cloudImg = images.CLOUD;\r\n    this.cloudSpeed = this.config.BG_CLOUD_SPEED;\r\n    \/\/ Horizon\r\n    this.horizonImg = images.HORIZON;\r\n    this.horizonLine = null;\r\n    \/\/ Obstacles\r\n    this.obstacleImgs = {\r\n    CACTUS_SMALL: images.CACTUS_SMALL,\r\n    CACTUS_LARGE: images.CACTUS_LARGE\r\n    };\r\n    this.init();\r\n    };\r\n    \/**\r\n    * Horizon config.\r\n    * @enum {number}\r\n    *\/\r\n    Horizon.config = {\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BUMPY_THRESHOLD: .3,\r\n    CLOUD_FREQUENCY: .5,\r\n    HORIZON_HEIGHT: 16,\r\n    MAX_CLOUDS: 6\r\n    };\r\n    Horizon.prototype = {\r\n    \/**\r\n    * Initialise the horizon. Just add the line and a cloud. No obstacles.\r\n    *\/\r\n    init: function() {\r\n    this.addCloud();\r\n    this.horizonLine = new HorizonLine(this.canvas, this.horizonImg);\r\n    },\r\n    \/**\r\n    * @param {number} deltaTime\r\n    * @param {number} currentSpeed\r\n    * @param {boolean} updateObstacles Used as an override to prevent\r\n    * the obstacles from being updated \/ added. This happens in the\r\n    * ease in section.\r\n    *\/\r\n    update: function(deltaTime, currentSpeed, updateObstacles) {\r\n    this.runningTime += deltaTime;\r\n    this.horizonLine.update(deltaTime, currentSpeed);\r\n    this.updateClouds(deltaTime, currentSpeed);\r\n    if (updateObstacles) {\r\n    this.updateObstacles(deltaTime, currentSpeed);\r\n    }\r\n    },\r\n    \/**\r\n    * Update the cloud positions.\r\n    * @param {number} deltaTime\r\n    * @param {number} currentSpeed\r\n    *\/\r\n    updateClouds: function(deltaTime, speed) {\r\n    var cloudSpeed = this.cloudSpeed \/ 1000 * deltaTime * speed;\r\n    var numClouds = this.clouds.length;\r\n    if (numClouds) {\r\n    for (var i = numClouds - 1; i >= 0; i--) {\r\n    this.clouds[i].update(cloudSpeed);\r\n    }\r\n    var lastCloud = this.clouds[numClouds - 1];\r\n    \/\/ Check for adding a new cloud.\r\n    if (numClouds < this.config.MAX_CLOUDS &&\r\n    (this.dimensions.WIDTH - lastCloud.xPos) > lastCloud.cloudGap &&\r\n    this.cloudFrequency > Math.random()) {\r\n    this.addCloud();\r\n    }\r\n    \/\/ Remove expired clouds.\r\n    this.clouds = this.clouds.filter(function(obj) {\r\n    return !obj.remove;\r\n    });\r\n    }\r\n    },\r\n    \/**\r\n    * Update the obstacle positions.\r\n    * @param {number} deltaTime\r\n    * @param {number} currentSpeed\r\n    *\/\r\n    updateObstacles: function(deltaTime, currentSpeed) {\r\n    \/\/ Obstacles, move to Horizon layer.\r\n    var updatedObstacles = this.obstacles.slice(0);\r\n    for (var i = 0; i < this.obstacles.length; i++) {\r\n    var obstacle = this.obstacles[i];\r\n    obstacle.update(deltaTime, currentSpeed);\r\n    \/\/ Clean up existing obstacles.\r\n    if (obstacle.remove) {\r\n    updatedObstacles.shift();\r\n    }\r\n    }\r\n    this.obstacles = updatedObstacles;\r\n    if (this.obstacles.length > 0) {\r\n    var lastObstacle = this.obstacles[this.obstacles.length - 1];\r\n    if (lastObstacle && !lastObstacle.followingObstacleCreated &&\r\n    lastObstacle.isVisible() &&\r\n    (lastObstacle.xPos + lastObstacle.width + lastObstacle.gap) <\r\n    this.dimensions.WIDTH) {\r\n    this.addNewObstacle(currentSpeed);\r\n    lastObstacle.followingObstacleCreated = true;\r\n    }\r\n    } else {\r\n    \/\/ Create new obstacles.\r\n    this.addNewObstacle(currentSpeed);\r\n    }\r\n    },\r\n    \/**\r\n    * Add a new obstacle.\r\n    * @param {number} currentSpeed\r\n    *\/\r\n    addNewObstacle: function(currentSpeed) {\r\n    var obstacleTypeIndex =\r\n    getRandomNum(0, Obstacle.types.length - 1);\r\n    var obstacleType = Obstacle.types[obstacleTypeIndex];\r\n    var obstacleImg = this.obstacleImgs[obstacleType.type];\r\n    this.obstacles.push(new Obstacle(this.canvasCtx, obstacleType,\r\n    obstacleImg, this.dimensions, this.gapCoefficient, currentSpeed));\r\n    },\r\n    \/**\r\n    * Reset the horizon layer.\r\n    * Remove existing obstacles and reposition the horizon line.\r\n    *\/\r\n    reset: function() {\r\n    this.obstacles = [];\r\n    this.horizonLine.reset();\r\n    },\r\n    \/**\r\n    * Update the canvas width and scaling.\r\n    * @param {number} width Canvas width.\r\n    * @param {number} height Canvas height.\r\n    *\/\r\n    resize: function(width, height) {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    },\r\n    \/**\r\n    * Add a new cloud to the horizon.\r\n    *\/\r\n    addCloud: function() {\r\n    this.clouds.push(new Cloud(this.canvas, this.cloudImg,\r\n    this.dimensions.WIDTH));\r\n    }\r\n    };\r\n    })();\r\n\r\n\r\n\t<\/script>\r\n\r\n\r\n\t<style> \r\n\r\na {\r\n  color: #585858;\r\n}\r\n\r\nbody {\r\n  background-color: #f7f7f7;\r\n  color: #585858;\r\n  font-size: 125%;\r\n}\r\n\r\nbody.safe-browsing {\r\n  background-color: rgb(206, 52, 38);\r\n  color: white;\r\n}\r\n\r\nbutton {\r\n  background: rgb(76, 142, 250);\r\n  border: 0;\r\n  border-radius: 2px;\r\n  box-sizing: border-box;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  float: right;\r\n  font-size: .875em;\r\n  height: 36px;\r\n  margin: -6px 0 0;\r\n  padding: 8px 24px;\r\n  transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n[dir='rtl'] button {\r\n  float: left;\r\n}\r\n\r\nbutton:active {\r\n  background: rgb(50, 102, 213);\r\n  outline: 0;\r\n}\r\n\r\nbutton:hover {\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, .50);\r\n}\r\n\r\n.debugging-content {\r\n  line-height: 1em;\r\n  margin-bottom: 0;\r\n  margin-top: 0;\r\n}\r\n\r\n.debugging-title {\r\n  font-weight: bold;\r\n}\r\n\r\n#details {\r\n  color: #696969;\r\n  margin: 45px 0 50px;\r\n}\r\n\r\n#details p:not(:first-of-type) {\r\n  margin-top: 20px;\r\n}\r\n\r\n#error-code {\r\n  color: black;\r\n  opacity: .35;\r\n  text-transform: uppercase;\r\n}\r\n\r\n#error-debugging-info {\r\n  font-size: 0.8em;\r\n}\r\n\r\nh1 {\r\n  -webkit-margin-after: 16px;\r\n  color: #585858;\r\n  font-size: 1.6em;\r\n  font-weight: normal;\r\n  line-height: 1.25em;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.2em;\r\n  font-weight: normal;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.icon {\r\n  background-repeat: no-repeat;\r\n  background-size: 100%;\r\n  height: 72px;\r\n  margin: 0 0 40px;\r\n  width: 72px;\r\n}\r\n\r\ninput[type=checkbox] {\r\n  visibility: hidden;\r\n}\r\n\r\n.interstitial-wrapper {\r\n  box-sizing: border-box;\r\n  font-size: 1em;\r\n  line-height: 1.6em;\r\n  margin: 50px auto 0;\r\n  max-width: 600px;\r\n  width: 100%;\r\n}\r\n\r\n#malware-opt-in {\r\n  font-size: .875em;\r\n  margin-top: 39px;\r\n}\r\n\r\n.nav-wrapper {\r\n  margin-top: 51px;\r\n}\r\n\r\n.nav-wrapper::after {\r\n  clear: both;\r\n  content: '';\r\n  display: table;\r\n  width: 100%;\r\n}\r\n\r\n#opt-in-label {\r\n  -webkit-margin-start: 32px;\r\n}\r\n\r\n.safe-browsing :-webkit-any(\r\n    a, #details, #details-button, h1, h2, p, .small-link) {\r\n  color: white;\r\n}\r\n\r\n.safe-browsing button {\r\n  background-color: rgb(206, 52, 38);\r\n  border: 1px solid white;\r\n}\r\n\r\n.safe-browsing button:active {\r\n  background-color: rgb(206, 52, 38);\r\n  border-color: rgba(255, 255, 255, .6);\r\n}\r\n\r\n.safe-browsing button:hover {\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, .5);\r\n}\r\n\r\n.safe-browsing .icon {\r\n  background-image: -webkit-image-set(\r\n      url(data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAMAAABiM0N1AAABoVBMVEX\/\/\/+Li4v\/\/\/\/\/\/\/\/y8vL09PT99fTbRDfXzMzt7e3v7+\/s7Ozy8vLw8PDu7u799PPSQTXx8fHZdGv19fX09PTm5ubbV0zXzczgW1Dd3d3c3Nzjb2Th4eHr6+vl5eXp6enZ2dng4OD29vbz8\/PYYFXZV0zaYVbjbWP219TRQTTXdGz43Nn++\/rib2T\/\/\/\/b29vTQjXaYVf66ObngXjjbmTq6ura2trngHf76Ofk19bX19fe3t7o6Oji4uLk5OTeU0f119TYQzbZQzbWQjbXQzbZRDfaRDfn5+fbV0vj4+PVQjXf39\/Y2Njgcmney8rqk4zdysn43drcysjcUETa1tbadGvaV0vaWEzZYVbibmXc2NjfzMvi0M7mfHPYYVbhzszd2dnZx8XieXDkc2nWX1Xacmne2trZdGzbcWjj0c\/XTUHX1NPVX1Xg3NzYdGvYXFHZ1dXWTUHgzczUX1Xh3d3XdWzWXFHaVkvXxcTVTEHhbmXTXlXi3t7ayMbVXFLgbmXUTEDXYFXSXlTXzMvk4ODUXFHWbGPWzMvk4eHZioP39\/f9Ro5BAAAABnRSTlMAAOQk5ye8yu+CAAACRklEQVR4XrXWRZPbUBSEUWdmIpl5mJmZg8zMzMzMzPCr43isNqif76u6lW+nuzgrtUqB\/1ptzUSVamrVDiS1A0ntQFI7kNQOJLUDSe1AUjuQ1A4ktQNJ70DSO5D0DiS9A0nvQIKjlOAoJThqyewsXZ1hQOL8YZNkcJrcJiIlBt2No0zKQSbHJVJiznW5BIg4kMocSDIEBxKcwvkoJAE6uMJAguO13xIaWyyRiDPdGGGQJBFnzb4Qh2Qp0VrmdHXFCSRKxFmYDAsQpNkSiTgtLZAAydIgcZqbYwQSJOqs3QsJkCRxp7s7RSBBok5bW5RAgkSd9bujIoS3AA0QZ0NHrx3ktLro5SvidNRnAUkO2nWZOPU7s4BEB9J74qzrzACSHNRwhDid8xlAogPpEHHa23sIxJyB60XpAHEioT9myBnf4XWq8W4aDw1niROKA\/I7270u5HbxKI3Hk0+IEzZBzuktXn35XRw7jsOJi34nZoCcN5u9+gq7OJPGqf+czzFAzsdtXp+xi0tpHPtvVzopDl3Z6nUtWNzXjZs436p0DNDQnT0r3QuW7vT+g8L54XKlEzX8RAw9nvrX02D53p89z59f+J0602\/NptfJZPKt52AX70Zy5w\/EWR0wSp+Gv3z1f3++jQx\/545Z+vGTfcd+\/eYOJFIEDtkpccxSyNqRpLitI0uWjiyFLR1ZignOqoC1VN0BJEupag4gK8nsALKToiYHkK3Uyx0CiRJ3ANlLWe4AspcyxKGQLHEHkL3UQxwKyRJxCKTtLyVXfw+a8JTgAAAAAElFTkSuQmCC) 1x,\r\n      url(data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAMAAADQmBKKAAACLlBMVEX\/\/\/+Li4v\/\/\/\/09PTX09P+\/Pzw8PDy8vLx8fHbRDfz8\/P++\/r19fX29vba2trb29vY2Njp6enc3NzX19fm5ubk5OT39\/fd3d3g4ODt7e3o6Ojr6+vn5+fq6uri4uLh4eHu7u7l5eXe3t7f39\/09PT4+PjbnZjanJfaV0zcnpnQQTTv7+\/bRTjZ2dn65eTZV0zcn5nj4+Ps7OzX1NPcSz\/qwr\/VQzbbV0zZRDfYxsTcn5rXZ17bycfgzczTQjXmgnrmf3bxwb3fWU3VQjXngHfac2rWQjbTQTXxtK\/SQTXbV0vfWU7aRDfmf3fltrLbSj366Ob2z8vRQTX76Of\/\/\/\/WcWjYcWnZQzf++\/vngnnws67ZQzbl3dzWQzfYQzbiz83cysjRQTTlgnnZcmnacmnaRTjngnrkgnnXcWney8nXRDfUQjXZaF7XQzbWRjrZm5bWcWngW1DngXjYRDfaeHDZRDj429nZRTjZnJbaWEzbSj7XxcTZmJLbRzr2z8zYVkvk0dDhzsz5+fnZmpXj0c\/kgXnlhX7iamDZx8XezMrbnpjbWEzfzMvVcWjYcmnUQzbYaF7qwb7mfHPUcWjbnpnYwsDXaF7mgnnURTnanJbUcGjTQjbURjnwwb3SRDjyu7bUb2fSQjbayMbRRDji0M7Tb2fZV0vRQjbWZ17RRDfdysnTb2bTQzbRQjXWZ13QRDfce3PSb2bQQjXVZ13PQzfRb2bUZ17ox8Tm4+PVRjlHvjbxAAAABHRSTlMAAIiOSsna\/gAABM1JREFUeF7t2FOTJVkYRuHqmjxm2bbVtDG2bdu2bdu2\/t3kvNHdUxW1u8+3JvNE7It6b\/O7eGLd7ayJbyurPe1\/r9YvDxdxDxf55eEi7uEivzxcxD1c5JeHi7iHi\/zycBH3cJFfHi7iHi7yy8NF3MNFfnm4iHu4yDMPF3EPF3GPVyLu4SKvPBJ55ZEIeDwSyeORSB6PRPJ4JJLHI5E8Honk8Ugkj0cieTwSyeORSB6PRPJ4JJLHI5E8Honk8UXEPdMnEUDuDijinp03A1Fu++oHmIh7MhmJjJ5MZvXJVEQ9Epk9TCQQ9Uhk9kjEQNgjkdkjEQJxj0RGj3bPmmqApo8VxSjKHb\/4+sQ1CMQ9Elk9Er2MQNwjkcEDGiGQPGaRPEjEQR9OZuyi3O6MY7cl4wJp+52iU+2ePQsNSQ7iIuBpKCc5iIvMnhAkEQRxEfCUp9IMFF2Uu+WInqlimoO4CHiKpTQHcZHZE4LqUxzERXZPSSIAiiA6y+KpD5fiIC4yegRqSXEQF9n6yNPSn8UgLnrF1kee\/oEsBXER6NMvEQJxkb2PPAOtWQBCIt5HntaeQQBCIt5Hnh6JAAiJeJ9w3YMAhES8jzzdc3kAYiLeR6CmfFwg7ZzJKH1Cz5xEAEREvE\/IaWrqywMQFPE+oaevMR8nKPGky3P\/6+Y+IaixEB8ocXbGudF7zX3CdRYIiHsk2mDtE3o62wsAxD3aMRvMfUJQXYGAuEeip0x95Glvr2smIO6R6BNbH3nqupoJiHsk2mzrI09XRzMAcY+2brOtjzwdEgEQ9Uh0kblPuPkhBOIeiYx9BApFAMQ9En1j6yNPW9sQB8lzhQtw2X2TLtHVtj7ytPU+IlA8noWGR90iWx95ensFgp5txzl26b\/vixsvd3xZ97StjzwTAsXlKZedomefM\/eZgCB51jv2wsH3xV13Or7evcXaB4LkOdOxM\/57X4zc7jgY3WLsM5GEoMSb5zq2yFMsvr3ecTH6sK1PEoISl1zg2BJPqTRyq+Nm5kJTHwMIe0r1hxEZ+kBQ4srrHbtq+fti5BrH3cxnhj7ptAGEPAK1DLtEXzxWoQ8EJR7f69hNgfN9MXy+4\/bBhyr2SafsoCfcHvf7yy36qWKfFADtuGHXsp0eHPb9Nbx22fV151XsA0ASuT3u99cza5FHfQBIor+vXbLngyO+T8deXHL9kqVPNitQrVX03tZFezWo8H5\/7btF12+Y+mSPqmGit\/Yd2jtBxff72LuHrjeZ+siDRO9\/cPSBfRQY\/m+MfXzgehPow0QnfHqK9nlg+r+x8UtdfwX6YNHXF4f7NjD+\/5n9Prz+gfThoh\/Hx38OzP9\/Zn8Z\/5X14aLffg\/A\/7GNf8A+XPRngP6P\/UX7cFGyAf0f4324yNxHHt6Hi6aq3IeLitXtw0Xpavfhomr34aL66vfhouh9VtXEJ0q1RO+zygACov7IfQwgJIraxwBiouxApD4GEBa1RugDQEDUE6GPAcRFgxH6ABARdUfoA0BAFKEPABER74NAXJRvgn0oiIv6UB8O4qJG1IeDuIj14SAu6iR9OIiLCu2oDwdxEevDQVxUh\/pwEBd1kT4cxEXNHagPB3ER68NBXDRP+nAQFw2BPgJVXwT6CFR9EejDQSv7B32\/UteG7LtWAAAAAElFTkSuQmCC) 2x);\r\n}\r\n\r\n.small-link {\r\n  color: #696969;\r\n  font-size: .875em;\r\n}\r\n\r\n.ssl .icon {\r\n  background-image: -webkit-image-set(\r\n      url(data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAGEElEQVR4Xu3aa4iUVRzHcU2DCkKLfSEk0btq7+s6O87edO3ei5BemEm+9kVEIJQgZiIFCaGW9cKiqJSQgm5GauOOu+p63Wa3i7lrm9uNNlZxZ9lEurin75k\/HHYmzj777JxnePZhBr64+Orshzm\/ZwZ2llJqkko5ACgBlYB+uDfusjmUoHW0h7roNxolJfGz\/F8X7aF1lKA50zjDjAGqp100TGqaDdMuqo8SUIySpByXpNhMBrqRdtA1UgF1jXbQTTMN6DbqJlWkumnhTAFaSIOkitygIIUbaB71TwHgD3qH1lIT3U43G2T5+Q5aSk\/SXro8BaR+mhdmoA89YM7QCpo7jU27gdZQnwfSB2EFWjEJzF\/0FM0WgIK6nrZ4jP+KsAHNpQsWnCvUJgBOe4z+tQBdoLlhAlpFytIaAQikdaQsPR4moHYLzj4BCKzZdMwClAoL0AL7HshXgoBbNsmHyAUhALJerx4BKEp9tmsWBqCdFqAXigj0sgVoZxiAkhagR4oI9KgFKBkGoAEL0J1FBLrLAvRjGIAyFqBbigh0qwUoEwagvy1A1xURaI4F6J8wAClLs4qcshQ2oBJQGa2n02Z\/wl2GTtN6KgsaaDWNkJqhjdDqoICeIRWRnnUNtJLGIwQ0TiudAAEwn4ZJRaxhmu8CaCOpiPacC6DuCAOlXQBlIgx01QWQinIloBLQFCsBlYBKQCWg+5aooRc36n+nBfD78+vVwINNEQUCZXT\/Z0q\/Rj7a6xvp0puvKf0a62zXSBEAsuCQTySDYxo7khKkqACNfvGpgfGLdOmNnaKS1+WOQ2rggcZoAF18fZtS4+O+kOw40uB7b6nulrpoAPlH8sZJxsqzgRRiIPdInjg\/7X7b4Bxq0FWor1rrQgrkHsk3TrsuXqHSrYsiAOSNNC2cVLZKQYoAUA6SK5zDuiWCFAGgHCRnOB3UST1LF0UBSPrz+BErzui5syoJhg8cqlJHElWCVAyg8wAE1cVdr3puz8\/vv6uSYAAFEAEDEFUCRKAIEIHTmZAEqd7jDGEEsuPYkfbuBqbSF87RRLU62litekEKFKgfANcNC46vfgGpHQg\/OMd0gmQ5iwugewBw1uQ4gwxy37aXZLitSFVkgKhKdSTIAFXrQJKOJWpAqhGk\/53HCVCDchQ4r0yKc3Bxuc4TKQUK40zAAEQyzpS9XhI48g7qouPUy3DnnalwoD4AXOSNc3e2L2O6ctUPku31K0iHszDm6eWBI51okneSOZd7IPc4F8A5AIzuYExXDhA1TAEJCAEy+5O7QQIkSOCQQXIGdA6AQuq7P6GupM\/4xklmq7AiDe37WHUC4A9HOtlcq3qX1XO+EADp+h9uFaQ8nP3A6A7EdOyPDhiAqAIgioO0PRdp6PNPVAcAbI8ZZzPQjQZIkADRGSRwyCAVDPT98gblor6HWlWm+5RfHPPZ5\/z2rQ5xpFMttaEBMkgDW7doGCmmKweIgAGIKgCiuAGiyuyjvefpteowAAy07A8JUrW+bgJkkGoIIAmgWgJIEqDmusKBzi6PKdfpgwoSMCTXSwcMyfUCJhs4cSklj3aAJj7ewcn57DNlnLACSV0gWXFM+usFGaAq+QxEgsQOJQyQIAGiM0iAkEHKuWJUMNB3AAQVu6CBqAIgasgBAkZqJ\/P1QjIblPMEs2+Q1Jy3Qy426NvlsQypoGJEzQbljHScDJBsUEoyG5Qz0vkbBAgJkgXnVEvd1cKB2mLdpIKsi8N74pi4Zom8kQZEZ5AA0RmkZoBAIUFq0UB1GihdMNA3bbFNpIKOw8sVi5MBYn9AAYjc4MgGgSNtKhjo67ZYGWVIBR1jmo9jkm\/xeSOdMCNNGqiGAJIAyhlpQQLmpDTCu6isYCCUQFq8isZJBR1I+ukF0sQnmG8cuWKgkCDpKwbMCWn8REvdKmd\/ad\/btli3gVQx4pfJAglSFdfMAAkSIDqDBAgJkhcOgbNBAFwBLQNIWkMjpIIOpIk4phQgOoPUKJktasrboeYaAZIyx1tqnxAAh0A94EyojDZTmsZIBRXbkTvSCTPSOiuOZK7ZGBuUps1AyeY47D9orGBWe54x9AAAAABJRU5ErkJggg==) 1x,\r\n      url(data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJAAAACQCAYAAADnRuK4AAAMFklEQVR4XuzcW2wUVRzH8fFSpaSx+AAJD5IqNcRSWhSkFwvEAFogKPWlxhivGC+JiAkaMBjC5UEjAU0E44sJMTGGKApeaKBdWtoCIj6B2AsYsRZDq7ZcWmnRHn9pJvnXTlDPzM7sOcffJt+XJs1mm09+szOdXU8pFTrGCCBKjIAYATECYgTECKh9foktjUEz0CNoPXofpdC36BT6BfUgNaJe1IGOo1r\/d9ahh9Ed6PoMvyYCirFstAi9hY6iy0ilucvoqP8c96IxdgMioFy0DH2G+pBKuD70KXoMjbUHEAHNRNtRP1KG1IveRkXmAiKgOSiFlOF9jqabA4iApqAvkLKoIbQD5WcOEAFloXVoAClL60dr0LWIgBJenW+QcqSv0C2IgBLoHvQbUo71K7qbgOJtuVzDcbJB9DQBxdNaAeB8LxNQeluJ1P+sFwgoPT0bE4AutBdtQs+gJWgGmoRuRLkjAI\/zf5aHSlAVeh5tRc3ofEyn+k8SULTmoT\/SeMq8Ez2B8tKM\/GpUjF5CTWgoTYgG0BwCCtdE1JUGOMfQU7IoiTQJbUBn04DoDBpPQHpdhWoiwmlF1f46eBlqLFqJeiIi2kVAej0a8VT4FZSFPEOagD6MiKiagP5buREOXR1oJvIM7XF0KSSgTpRDQP\/e6yHxHEcTkWd4FREOaWsJ6J+bEPLmr3Z5o2lFJSFfZw\/KIaArtyHk\/5DykWdZ94W8RPEiAV35vuXuEICqkGdpG0MAOo2uI6BgD4bAswN5FpeFjoVAtJSAgu0Jcbo+GXmWVxkC0CcE9PfGoUFNQO8iz5FSIe5kzCEg6SGkNCtwCNDiaO\/9COg9TTwHkedQ16AfNQFtIyDplCag5chzrNc0AZ1ABITGI6XZFAcBzdUE9Ce6gYBwk3yI6yCeg2WFuDEN6AjoOWev\/ehXrwkId1IS0BuagNY4DGiLJqDNBISLYmHui3G0ZZqAPiIg\/U+YznYY0Dz9T7QSUIcmoMkOAyrQBNRGQPpnHrkOA7pJE1A3AQGFZtkOA8oN8cVVBKSZ53DZmoAGCIiAIi2yFYAIiIAIiIAIiIAIqBC9ivaiTvQ7UpFi\/egnVINWo6kuAlqCDhNAYjWihS4Ays\/odzezGnSzrYCq0QUCyHjnUJVtgFajIQIwpiG0whZAqwjA2FaYDqja+OXhElUZCQgAbkUXCcD4elGeUYD8r6TbTwDWVGMaoAcIwLoqTQJ0hACs64ARgADgdgKwtttMALSeAKxtlQmA6gjA2r40AdDPBGBtP5gAaJAArO2iCYCUvTECYgTECMjGGAExAmIEZGmMgBgBMQKyNEZAjIAYAZncyYUVqn1BaWaeu7LCZkAEdHLRbNV35JA6t2d34oi633lTXWr7Tp1aOt8+QAQkePyHIEoIj\/\/QQERApuIJIEoKjyBq0UBEQObhCSJKAE8Q0fdVCwIACMgWPEFECeGRzrecUO33B5aIgIzB87XgSQRREI91iAgIAUJgeZJC1L1ti\/bzXmg9odoWzzUJEBfo7KaNSg0NJYdI8Gh3+oPtqr5smmqZN0sAEJD1iBLDs2\/WVLXvzgJVX1ooiAjICURJ4QEihBoEEQE5gih+PD6g2uGmApEczgjIDUQxL4\/gQaoOHZD3RATkFiLBA5BpXR4BhEoEEQG5hEjwxLA8giflJ4gIyAlEuEgY+\/KkRtUoiAjIdkQokeWRCtV+1FRWJIhcB0RE0ZdH8PiVAlG5ICIgsxAZujyCp95PEBGQaYiMXZ76UTULIgIyDJGhyyM1DDdNEBGQcYgMXR7Bg4ZP7w\/eVSyICMgoRGYuj+BBgqgViAjIkLq3bg4NqHPXxwIoxuUZWSM6JIjsB9QGALbWFR6PINoNREAR6\/IIHiSIcDiL9jcgoLjw6COqxVpgjZC\/QMBSF6gQgPxKAUgSTICDVEPZiAKQilRjeZEgIiB78QiinaoOiJLCg1STICIgS\/EEEWEhYsYjgPwOV0wXRDYCIh7pDBClACDW5RlVc3mxILINUCsAWNBf7dpPi1tlFMdx+1IUFDrOTJLpxKaTZHRaF4JglYqgXfka3BSsXVhd6s434MadBQt2krT513Qmfwqt2mlVEEeQFrUFRYXBQq+\/55555gfPSci9N5PkJtzF9w2EDyc554nCMwFE4508xCNhM+sA0T0gCvy5xALQKQCIddHx\/PLF597OxQ8iwbt\/+ZJXw9QQPDpBtORXBxLmQAKe5hoiIEICnFZeurFf2yA6+ULAzyYBNDY8u8BTwjZVwo3nzsXzkRFV15ZHw8MwiVjrREoy08epQ0SzAAja4xnwfBJx8hCPbYeIIk8i3oCW\/GTrYg3mNXMuHCZwNJ4tBkQZIMoO\/YwSQKPj0ZMnCzyrC0jwlP2eHxVRCDyDD4gtAELy+8dpy5ZP+XX9SZRNAE1w8hBP1uJhFRT1N9GDy196dUGkr88MeFw4TOAgBUfj2ZaIKK6AzOoYp34bafKYqXNUyh71yoiA+Np+96OoiC55DQAYgify5CEe1kbdoiBSn1cCaEQ8nDzEk1V49F81RkRUB4CamkJ6hR98A9KQ7Ba2xQiJiBJA45g8m8CxCTx+Agg5X2NAU3HaGXESaTxI40HEw4LjaRekXjFDRAkg9uPpU97jR3+Mhier8ZQH47GPppEm0aPt616jmBn75CGetI2I4gLIXD7j0E\/vvgVED8c+eYiHr+73PiaiIHiaxZUJTh4C6vgJortAdC8B1BfRJCaPenUnogh4Al6fW0xdoBWkgil9UNupty6IEkB9EP3HrzPVz8BzBTiuAI+fABJQkkAClrIb0FRsxwUQ04j019bK\/hvYsOsz8bBweNBAPJ2iBEQJIMZunX3d23uoEe0SD+BoPKWoePjyDkQXFKJHW33wTHjyEA\/rFmMA6C7eXOLY7bNvENFYJw\/xmKo5IiKeGE0e4kkABUQ0ickj5ZhB9PBG06sDT9U+np6Q9APqMtZ6qSlpSACCLCINqWBKSwKIuZAKGVsCaFg3X3tZTR5pwSaQgKXkBjRl23EDiBHTIrJwWNUEHMTDFB5EPIyAUn4tST+i5m1pv20nhScBFC4zvr8GGkQ8aPOw8DhVmTye5iT9gLqPZ+DfNoLiSUfC040DoB2sgrOQGdcyhRYO2kSydbkBjc3fuhjX+EUUFA\/SeBDxsHB4UEQ8qJgAClUbiATOZPHUVcvYwqSGpCEBCLKINKS8KW0TRMzZxDLMIiqiBFD4sIEATng8bBHJVxdzIZnfPqzGBA8iHhYGDwqGx6ljKrKpA7oDALMWRrdFxICmJPH3D4uEp6bwDFjh2bA7EMAgd41nQMMUHr3KJ4CihvFt0ATDw\/Qaz9Qf6GtM8CDiYWHwIOJxK7C+a3yR8Sts+oAeI29WJ1FpyB2oggLgQc4KzwbegBps6B2oBTjqBsQi4cEE+mfqgL47mX2AvFkN70H+Gq9XeR4SkV7jGfFICg8iHhYKDzo8PAS0GwdA15A3y3WBqBwFT0wmD0szi6jI2kBj6rAr0we0kf0QeTMeEK0YLIc1ebiF8QKtMQEIsog0pLxJPWMQU4EFwqMBnZs6oG83sivIm4d6QIQNTJILNFOQsIHlpGtOAgcpOGHxpA4VT8dtPbMwdUBQZBD15ggRsATCowHFZfIwfUDkIfE6AUwf0BnkzROiyrQmj19qUM4mlnau0S6mjF\/bTSbQK7EB9M1G9giqI29euglEwDIADyOmpYOqTtzElv3qkrpGE1IKjYxH6o9nkwCmD8giehb9O0+IeuvHAGdx\/5hoMEn6Et0fTy00npQ03snzJ3o6VoCIaPVt5M1TQCSTiCk8aJyTx\/kxnWYWUYFtAYoNiJhsYE\/QGQKIGaDbG6umc8ibp26+uGKQDJ48TEMCEGQRaUhrppQkgFhEPNuMeKT3CCCugKT30ZN5QtQDoqsAwSm0JClA4fCgEHiiTx7iiTsg9g76e+4mUY5w0AQmj65lKjAicpI70F\/oTQKIM6CXVt2eQw3kzUlERDg6AEEWkYa0ZmINp2aeBcOD+uMpo2cIIOaAbgFNn46g06iLvHmot05EyMEjVSV9E1pDQfFEnzzbgPMqAcwqIF0aXUAVdB\/tzS6iYwYHD4ooCB4UBQ\/T29geNrFfURmdB6hFAoh\/\/wP7Cc82cAc2XQAAAABJRU5ErkJggg==) 2x);\r\n}\r\n\r\n.styled-checkbox {\r\n  float: left;\r\n  height: 16px;\r\n  margin-top: .36em;\r\n  position: relative;\r\n  width: 16px;\r\n}\r\n\r\n[dir='rtl'] .styled-checkbox {\r\n  float: right;\r\n}\r\n\r\n.styled-checkbox label {\r\n  background: transparent;\r\n  border: white solid 1px;\r\n  border-radius: 2px;\r\n  height: 14px;\r\n  left: 0;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 14px;\r\n}\r\n\r\n.styled-checkbox label::after {\r\n  background: transparent;\r\n  border: 2px solid white;\r\n  border-right-width: 0;\r\n  border-top-width: 0;\r\n  content: '';\r\n  height: 4px;\r\n  left: 2px;\r\n  opacity: 0.3;\r\n  position: absolute;\r\n  top: 3px;\r\n  transform: rotate(-45deg);\r\n  width: 9px;\r\n}\r\n\r\n.styled-checkbox input[type=checkbox]:checked + label::after {\r\n  opacity: 1;\r\n}\r\n\r\n@media (max-width: 700px) {\r\n  .interstitial-wrapper {\r\n    padding: 0 10%;\r\n  }\r\n}\r\n\r\n@media (max-height: 600px) {\r\n  .interstitial-wrapper {\r\n    margin-top: 5px;\r\n  }\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  button,\r\n  [dir='rtl'] button {\r\n    float: none;\r\n    font-size: 1em;\r\n    width: 100%;\r\n  }\r\n\r\n  #details {\r\n    margin: 20px 0 20px 0;\r\n  }\r\n\r\n  #details p:not(:first-of-type) {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  #details-button {\r\n    display: block;\r\n    padding-top: 14px;\r\n    text-align: center;\r\n    width: 100%;\r\n  }\r\n\r\n  .interstitial-wrapper {\r\n    padding: 0 5%;\r\n  }\r\n\r\n  #malware-opt-in {\r\n    margin-top: 24px;\r\n  }\r\n\r\n  .nav-wrapper {\r\n    margin-top: 30px;\r\n  }\r\n\r\n  .small-link {\r\n    font-size: 1em;\r\n  }\r\n}\r\n<\/style>\r\n  <style> \r\n\r\n \r\nhtml[subframe] #main-frame-error {\r\n  display: none;\r\n}\r\n\r\n \r\nhtml:not([subframe]) #sub-frame-error {\r\n  display: none;\r\n}\r\n\r\n#diagnose-button {\r\n  -webkit-margin-start: 0;\r\n  float: none;\r\n  margin-bottom: 10px;\r\n  margin-top: 20px;\r\n}\r\n\r\nh1 {\r\n  -webkit-margin-before: 0;\r\n}\r\n\r\nh2 {\r\n  color: #666;\r\n  font-size: 1.2em;\r\n  font-weight: normal;\r\n  margin: 10px 0;\r\n}\r\n\r\na {\r\n  color: rgb(17, 85, 204);\r\n  text-decoration: none;\r\n}\r\n\r\n.icon {\r\n  -webkit-user-select: none;\r\n}\r\n\r\n.icon-generic {\r\n   \r\n  content: -webkit-image-set(\r\n      url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAACkAAAAyCAAAAADkGq1yAAAAAnRSTlMA\/1uRIrUAAABLSURBVHhe7dOxDQAgCERRdrza\/ScwscNYSKIhWAror9+VR7BjKZbkrSpKeA45K8PQuoYqcUNKbmUzpNkD8kvM\/ErlkVFk8necCyU7IotT35DVJRIAAAAASUVORK5CYII=') 1x,\r\n      url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAFIAAABkCAAAAAAwZDj3AAAAAnRSTlMA\/1uRIrUAAABiSURBVHhe7cy7CYAwFABAd8z+HyewskkTW+EFA3kgSu4GuK2ktI71SqWyjeyxirlS2aeMQczfKcuNUjny\/1KpPCbKjA+WSqVSqVQqawmy5TlZKpVPQciVSuUEpVKZtVypVF5DHE3\/NzR+1AAAAABJRU5ErkJggg==') 2x);\r\n  height: 50px;\r\n  padding-top: 20px;\r\n  width: 41px;\r\n}\r\n\r\n.icon-offline {\r\n  content: -webkit-image-set(\r\n      url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAACwAAAAvAgMAAADlfsA8AAAADFBMVEX39\/f\/\/\/\/39\/dTU1NOmoBdAAAAAnRSTlMAAHaTzTgAAAB6SURBVHherc2xDUIxDIThE6UbVmEZ9nN9TUZgJWo3Ju8UhGIrHX\/1FScdnr82K+PMoZizbozLsfw+OP9mkpvNARuabB6OG6fIZr4uozi4noqTYrcKHoxi63ZodLBG0a0R0c2M5Uw5Z3rzoavqwNf3CGybKH4gYXTq6wPqOghb2tvIFQAAAABJRU5ErkJggg==') 1x,\r\n      url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAFgAAABeAgMAAADaoju6AAAADFBMVEX39\/f\/\/\/\/39\/dTU1NOmoBdAAAAAnRSTlMAAHaTzTgAAACDSURBVHhe7dIhDgQhAEPR6jV7urnkN3PEbkIIICCQSdfNl8\/UVNe0DA\/R0p7BtTzjFkesLO8nX6YUYpj8IcO48Ie+GGa4XSqYYwO4lWUPSpjH4I8s5Vg8Z7RhkeeZE2fRNc\/Y5oRtu7NrC26bCKNWktEp2xueT5on\/F2yLQlAQGWt+AcZixZ9AfIcYgAAAABJRU5ErkJggg==') 2x);\r\n  height: 47px;\r\n  margin: 0 0 40px;\r\n  position: relative;\r\n  width: 44px;\r\n}\r\n\r\n#content-top {\r\n  margin: 20px;\r\n}\r\n\r\n#help-box-outer {\r\n  -webkit-transition: height ease-in 218ms;\r\n  overflow: hidden;\r\n}\r\n\r\n#help-box-inner {\r\n  background-color: #f9f9f9;\r\n  border-top: 1px solid #EEE;\r\n  color: #444;\r\n  padding: 20px;\r\n  text-align: start;\r\n}\r\n\r\n#suggestion {\r\n  margin-top: 15px;\r\n}\r\n\r\n#short-suggestion {\r\n  margin-top: 5px;\r\n}\r\n\r\n#sub-frame-error-details {\r\n  color: #8F8F8F;\r\n \r\n  text-shadow: 0 1px 0 rgba(255,255,255,0.3);\r\n}\r\n\r\n[jscontent=failedUrl] {\r\n  overflow-wrap: break-word;\r\n}\r\n\r\n#search-container {\r\n   \r\n  display: flex;\r\n  margin-top: 20px;\r\n}\r\n\r\n#search-box {\r\n  border: 1px solid #cdcdcd;\r\n  flex-grow: 1;\r\n  font-size: 16px;\r\n  height: 26px;\r\n  margin-right: 0;\r\n  padding: 1px 9px;\r\n}\r\n\r\n#search-box:focus {\r\n  border: 1px solid rgb(93, 154, 255);\r\n  outline: none;\r\n}\r\n\r\n#search-button {\r\n  border: none;\r\n  border-bottom-left-radius: 0;\r\n  border-top-left-radius: 0;\r\n  box-shadow: none;\r\n  display: flex;\r\n  height: 30px;\r\n  margin: 0;\r\n  padding: 0;\r\n  width: 60px;\r\n}\r\n\r\n#search-image {\r\n  content:\r\n      -webkit-image-set(\r\n          url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAPCAQAAAB+HTb\/AAAArElEQVR4Xn3NsUoCUBzG0XvB3U0chR4geo5qihpt6gkCx0bXFsMERWj2KWqIanAvmlUUoQapwU6g4l8H5bd9Z\/iSPS0hu\/RqZqrncBuzLl7U3Rn4cSpQFTeroejJl1Lgs7f4ceDPdeBMXYp86gaONYJkY83AnqHiGk9wHnjk16PKgo5N9BUCkzPf5j6M0PfuVg5MymoetFwoaKAlB26WdXAvJ7u5mezitqtkT\/\/7Sv\/u96CaLQAAAABJRU5ErkJggg==') 1x,\r\n          url('data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABwAAAAeCAQAAACVzLYUAAABYElEQVR4Xr3VMUuVURzH8XO98jgkGikENkRD0KRGDUVDQy0h2SiC4IuIiktL4AvQt1CDBJUJwo1KXXS6cWdHw7tcjWwoC5Hrx+UZgnNO5CXiO\/75jD\/+QZf9MzjskVU7DrU1zRv9G9ir5hsA4Nii83+GA9ZI1nI1D6tWAE1TRlQMuuuFDthzMQefgo4nKr+f3dIGDdUUHPYD1ISoMQdgJgUfgqaKEOcxWE\/BVTArJBvwC0cGY7gNLgiZNsD1GP4EPVn4EtyLYRuczcJ34HYMP4E7GdajDS7FcB48z8AJ8FmI4TjouBkzZ2yBuRQMlsButIZ+dfDVUBqOaIHvavpLVHXfFmAqv45r9gEHNr3y3hcAfLSgSMPgiiZR+6Z9AMuKNAwqpjUcA2h55pxgAfBWkYRlQ254YMJloaxPHbCkiGCymL5RlLA7GnRDXyuC7uhicLoKdRyaDE5Pl00K\/\/93nABqPgBDK8sfWgAAAABJRU5ErkJggg==') 2x);\r\n  margin: auto;\r\n}\r\n\r\n.hidden {\r\n  display: none;\r\n}\r\n\r\n.suggestions {\r\n  margin-top: 18px;\r\n}\r\n\r\n.suggestion-header {\r\n  font-weight: bold;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.suggestion-body {\r\n  color: #777;\r\n}\r\n\r\n.error-code {\r\n  color: #A0A0A0;\r\n  margin-top: 15px;\r\n}\r\n\r\n \r\n@media (min-width: 641px) and (min-height: 641px) {\r\n  #help-box-inner {\r\n    line-height: 18px;\r\n  }\r\n}\r\n\r\n \r\n@media (max-width: 640px), (max-height: 640px) {\r\n  body {\r\n    margin: 15px;\r\n  }\r\n  h1 {\r\n    margin: 10px 0 15px;\r\n  }\r\n  #content-top {\r\n    margin: 15px;\r\n  }\r\n  #help-box-inner {\r\n    padding: 20px;\r\n  }\r\n  .suggestions {\r\n    margin-top: 10px;\r\n  }\r\n  .suggestion-header {\r\n    margin-bottom: 0;\r\n  }\r\n  .error-code {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n \r\nhtml[subframe] body {\r\n  overflow: hidden;\r\n}\r\n\r\n#sub-frame-error {\r\n  -webkit-align-items: center;\r\n  background-color: #DDD;\r\n  display: -webkit-flex;\r\n  -webkit-flex-flow: column;\r\n  height: 100%;\r\n  -webkit-justify-content: center;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n}\r\n\r\n#sub-frame-error:hover {\r\n  background-color: #EEE;\r\n}\r\n\r\n#sub-frame-error-details {\r\n  margin: 0 10px;\r\n  visibility: hidden;\r\n}\r\n\r\n \r\n#sub-frame-error:hover #sub-frame-error-details {\r\n  visibility: visible;\r\n}\r\n\r\n \r\n \r\n@media (max-width: 200px), (max-height: 95px) {\r\n  #sub-frame-error-details {\r\n    display: none;\r\n  }\r\n}\r\n\r\n \r\n#details-button {\r\n  background-color: inherit;\r\n  background-image: none;\r\n  border: none;\r\n  box-shadow: none;\r\n  min-width: 0;\r\n  padding: 0;\r\n  text-decoration: underline;\r\n}\r\n\r\n \r\n.suggested-left > #control-buttons,\r\n.suggested-right > #details-button  {\r\n  float: left;\r\n}\r\n\r\n.suggested-right > #control-buttons,\r\n.suggested-left > #details-button  {\r\n  float: right;\r\n}\r\n\r\n#details-button.singular {\r\n  float: none;\r\n}\r\n\r\n#buttons::after {\r\n  clear: both;\r\n  content: '';\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n \r\n.offline .interstitial-wrapper {\r\n  color: #2b2b2b;\r\n  font-size: 1em;\r\n  line-height: 1.55;\r\n  margin: 100px auto 0;\r\n  max-width: 600px;\r\n  width: 100%;\r\n}\r\n\r\n.offline .runner-container {\r\n  height: 150px;\r\n  max-width: 600px;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 10px;\r\n  width: 44px;\r\n  z-index: 2;\r\n}\r\n\r\n.offline .runner-canvas {\r\n  height: 150px;\r\n  max-width: 600px;\r\n  opacity: 1;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n\r\n.offline .controller {\r\n  background: rgba(247,247,247, .1);\r\n  height: 100vh;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100vw;\r\n  z-index: 1;\r\n}\r\n\r\n#offline-resources {\r\n  display: none;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .suggested-left > #control-buttons,\r\n  .suggested-right > #control-buttons {\r\n    float: none;\r\n    margin: 50px 0 20px;\r\n  }\r\n}\r\n\r\n@media (max-height: 350px) {\r\n  h1 {\r\n    margin: 0 0 15px;\r\n  }\r\n\r\n  .icon-offline {\r\n    margin: 0 0 10px;\r\n  }\r\n\r\n  .interstitial-wrapper {\r\n    margin-top: 5%;\r\n  }\r\n\r\n  .nav-wrapper {\r\n    margin-top: 30px;\r\n  }\r\n}\r\n<\/style>\r\n\r\n\r\n\r\n\r\n<div id=\"main-frame-error\" class=\"interstitial-wrapper\" jstcache=\"0\">\r\n    <div class=\"onlyforchrome\" style=\"font-size: 30px;text-align: center;font-family: Helvetica;\">Running T-Rex<\/div>\r\n    <div class=\"onlyforchrome\" style=\"margin-top:5px;text-align:center;color:#8a8a8a;margin-bottom:80px; font-size:.8em;line-height:1.2em;font-family: Georgia;\"><strong>T-Rex Dino game<\/strong><br> Click on the game screen, then press \"Space\" to jump your Dino and start the game.<\/div>\r\n\r\n    <div id=\"offline-resources\" jstcache=\"0\">\r\n    <div id=\"offline-resources-1x\" jstcache=\"0\">\r\n      <img id=\"1x-obstacle-large\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJYAAAAyCAMAAACJUtIoAAAACVBMVEX\/\/\/\/39\/dTU1OabbyfAAAAAXRSTlMAQObYZgAAAXhJREFUeF7t2NGqAjEMANGM\/\/\/RlwvaYQndULuFPJgHUYaEI6IPhgNAOA8HZ+3U6384F5y1U6YzAZTWG+dZamnFEstBFtCKJZSHWMADLJ18z+JqpQeLdKoDC8siC5iFCQs4znIxB5B1t6F3lQWkL4N0JsF+u6GXJdbI+FKW+yWr3lhgCZ2VSag3Nlk\/FnRkIRbasLCO0oulikMsvmGpeiGLZ1jOMgtIP5bODivYYUXEIVbwFCt4khVssRgsgidZwQaLd2A8m7MYLGTl4KeQQs2y4kMAMGGlmQViDIb5O6xZnnLD485dIBzqDSE1yyFdL4Iqu4XJqUUWl\/NVAFSZq1P6a5aqbAUM2epQbBioWflUBABiUyhYyZoCBev8XyMAObDNOhOAfiyxmHU0YNlldGAphGjFCjA3YkUn1o\/1Y3EkZFZ5isCC6NUgwDBn1RuXH96doNfAhDXfsIyJ2AnolcCVhay0kcYbW0HvCO8OwIcJ3GzkORpkFuUP\/1Ec8FW1qJkAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"1x-obstacle-small\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAGYAAAAjCAMAAABRlI+PAAAADFBMVEX\/\/\/\/\/\/\/\/39\/dTU1PhglcSAAAAAXRSTlMAQObYZgAAAPNJREFUeF7tlkEKwzAMBLXr\/\/+5iQhU7gRRQkyhZI+DhwH74jhmO+oIJBVwURljuAXagG5QqkSgBLqg3JnxJ1Cb8SmQ3o6gpO85owGlOB4m2BNKJ11BSd01owGlOHkcIAuHkz6UNpPKgozPM54dADHjJuNhZiJxdQCQgZJeBczgCAAy3yhPJvcnmdC9mZwBIsQMFV5AkzHBNknFgcKM+oyDIFcfCAoy03m+jSMIcmoVZkKqSjr1fghyahRmoKRUHYLiSI1SMlCq5CDgX6BXmKkfn+oQ0KEyyrzoy8GbXJ9xrM\/YjhUZgl9nnsyTCe9rgSRdV15CwRcIEu8GGQAAAABJRU5ErkJggg==\" jstcache=\"0\">\r\n      <img id=\"1x-cloud\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAC4AAAAOCAQAAAD6HOaKAAAAU0lEQVR4XrWSsQkAQAgD3X9El\/ELixQpJHCfdApnUCtXz7o49cgagaGPaq4rIwAP9s\/C7R7UX3inJ0BDb6qWDC7ScOR\/QWjRlFizuPwLtTLj+qkH6DjD2wLtikUAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"1x-text\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAL8AAAAYAgMAAADWncTDAAAABlBMVEX\/\/\/9TU1NYzE1OAAAAAXRSTlMAQObYZgAAAO1JREFUeF690TFqxUAQA1BNoRtk7jMu3E9Auv9Vgr\/5A863Y9zEhVhkHmhZsEGkw4Lppmllh1tcLHx+aRj2YnEDuQFvcQW+EoZY0TQLCZbEVxRxAvY+i8ikW0C0bwFdbictG2zvu\/4EcCuBF0B23IBsQHZBYgm1n86BN+BmyV5rQFyCJAiDJSTfgBV9BbjvXdzIcKchpMOYd3gO\/jvCeuUGFALg95J0\/SrtQlrzz+sAjDwCIQsbWAdgbqrQpKYRjmPuAfU5dMC+c0rxOTiO+T6ZlK4pbcDLI1DIRaf3GxDGALkQHnD+cGhMKeox+AEOL3mLO7TQZgAAAABJRU5ErkJggg==\" jstcache=\"0\">\r\n      <img id=\"1x-horizon\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAABLAAAAAMAgMAAAAPCKxBAAAABlBMVEX\/\/\/9TU1NYzE1OAAAAAXRSTlMAQObYZgAAALJJREFUeF7t1EEKAyEMhtEvMNm7sPfJEVyY+1+ltLgYAsrQCtWhbxEhQvgxIJtSZypxa\/WGshgzKdbq\/UihMFMlt3o\/CspEYoihIMaAb6mCvM6C+BTAeyo+wN4yykV\/6pVfkdLpVyI1hh7GJ6QunUoLEQlQglNP2nkQkeF8+ei9cLxMue1qxVRfk1Ej0s6AEGWfVOk0QUtnK5Xo0Lac6wpdtnQqB6VxomPaz+dgF1PaqqmeWJlz1jYUaSIAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"1x-trex\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQgAAAAvAgMAAABiRrxWAAAADFBMVEX\/\/\/9TU1P39\/f\/\/\/+TS9URAAAAAXRSTlMAQObYZgAAAPpJREFUeF7d0jFKRkEMhdGLMM307itNLALyVmHvJuzTDMjdn72E95PGFEZSmeoU4YMMgxhskvQec8YSVFX1NhGcS5ywtbmC8khcZeKq+ZWJ4F8Sr2+ZCErjkJFEfcjAc\/6\/BMlfcz6xHdhRthYzIZhIHMcTVY1scUUiAphK8CMSPUbieTBhvD9Lj0vyV4wklEGzHpciKGOJoBp7XDcFs4kWxxM7Ey3iZ8JbzASAvMS7XLOJHTTvEkEZSeQl7DMuwVyCasqK5+XzQRYLUJlMbPXjFcn3m8eKBSjWZMJwvGIOvViAzCbUj1VEDoqFOEQGE3SyInJQLOQMJL4B7enP1UbLXJQAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"1x-restart\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAACQAAAAgCAQAAADQmBIFAAAAZklEQVR4Xu3WMQoAIAxDUe\/Y+58jYwV1CwQJWQT5o\/DAoaWjV2i\/LRym\/A5FjEsR41LPQchByEHwIVAEC4gZpghmSDP8egXpr\/hQZaAKQFQe+pBOQAblDC336qrlPpSg0MEjInbWTLFFmwc8TpTAAAAAAElFTkSuQmCC\" jstcache=\"0\">\r\n    <\/div>\r\n    <div id=\"offline-resources-2x\" jstcache=\"0\">\r\n      <img id=\"2x-obstacle-large\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASwAAABkBAMAAADOLxDzAAAACVBMVEX\/\/\/9TU1P39\/ea77PDAAAAAXRSTlMAQObYZgAAAa9JREFUeF7t1lFqhEAQBuG+wl6h7n\/IEEgKlma2R8Vk1O4HWSh++Xzb8AKA8E4IXrlYnsXr+zgh1OdifZbBdFIApdWiWShtVhmQ+jAWMLFollCOsTzgxiyd7GcR01\/YLOZf1SwsN2EBozBgAU9l4TAHkDWzCNjKApZlybO4z+GtFwu9bGKZl2TJSyxDxaoX8yyha7LGZRDqxR+ymtUsaNaWhTM+s5rl05tjNUsVz2Kxi6XqhSy4NcvbzgLSnzzvjqzgCCsiHsXSdZwVPIAVHGIhi+ABrOAAi5+Avy7HQhaycpAVpDDBsuKDAOBCrHzjQHgYhl9YsHxf+vRrsQxjVVAsDNMsF6uydBUhq+wWBq\/ayCKWZekqA6DKPPEq\/ZMsYllWdgGDoMdaLAzMsFwszgoAi1pDxUrWFKhZLlZnpXIkAORAs7YEoFmzQSxmt2NWs+xOP7GapRCiZjUrwFyymhX\/xmpWs5rVrGZxQphmsT6LAAsvdgcBhmmWi9VZvN7+x+4K2WtgwBosFmZZvIh9IXsl8M5C1mCxLsvTfizoxfDTAfgdAIPFlVhxRqgHlrVZX9y44aEEvVqmAAAAAElFTkSuQmCC\" jstcache=\"0\">\r\n      <img id=\"2x-obstacle-small\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAMwAAABGBAMAAAByJ2Z\/AAAADFBMVEX\/\/\/9TU1P39\/f\/\/\/+TS9URAAAAAXRSTlMAQObYZgAAARZJREFUeF7t2NEJwzAQg2GtcCtoBe2\/W6k5aK8qLgR6ToL9KPzzgR+NPCRRjg2ScjiQ9DKMCE4HRYQOJB2MJyXyQWPQgeSCDD8HnYHh10F6NbJk9KyMwpJ+hkEfnoSyGX1NUmAOqVjSz4zrNgwhm9FbMmEyuS7DpQw\/Gf5kOGEYXMgwWBobnGHQmZKsYuyKDcZk8gdmM5uJMzKbgS7I5KENgJzxxN95PUMfAKi8gCXO6BQM4cM4ysEZwplyfxFDErAhmWniDKT3pJEpD2RDMpPEGUt6mOIQ1XFGmiXOZNLIgKUpgzH4lTgDtDIgmY0NznhSnWhk\/v2ZkuONGOI2DEn0MNf7ttvMZjazmc2AJDkdJOlQ0sk8AC45t4r28J0GAAAAAElFTkSuQmCC\" jstcache=\"0\">\r\n      <img id=\"2x-cloud\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAFwAAAAcAgMAAACR2TCnAAAABlBMVEUAAADa2to4qB92AAAAAXRSTlMAQObYZgAAAFFJREFUeF6VzTEKAFEIxNA03m+a3P8q2wqi\/E35BIdeGXq3q5hnrwBs7mC5vIZzu\/nnqI319vRtqHB731blwSHjx+22+Rdn94rzQq0ugKPVlz5onyJcGdu0NgAAAABJRU5ErkJggg==\" jstcache=\"0\">\r\n      <img id=\"2x-text\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAX4AAAAwAQMAAAAsMYMXAAAABlBMVEUAAABTU1OoaSf\/AAAAAXRSTlMAQObYZgAAAPdJREFUeF7tkzFqAzEQRb9RsZ11BF0jlXSlpDdYOcFeSeCLKLeYQujHwxRrtF0gUoqo+AwfPRh4DDZByKk7tkv3rNszWhLHKv7BhtObALxF3LP44vRvRoLPTa4avoS8BLA+PSNFzyqAq\/wDwNZxrxKBxq5axLGRS4EkgP6A6rrhy6ZVQLoiZKpfRJ8NqCp+HbCZpAcromNNHTfoeWS7hwnA\/\/tROIpm17lddCbFgMAylGSZANiRhL1ou2treo0\/ErB5AtAwbr8e8HK28wpwP8rmpwCv23+cPZhvK8GOCUD4lMHRALiOw8O9TAAcB2C8B7zDSvPw+8A3sQJ\/MSdPGzIAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"2x-horizon\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAACWAAAAAYAQMAAABEalRSAAAABlBMVEX\/\/\/9TU1NYzE1OAAAAAXRSTlMAQObYZgAAAOtJREFUeF7tljEKwzAMRb\/J0CWgI\/QKOYAh1+pUcjQfpUfw2MFEHVyDQSQmQUNM9AYNcobnh4egU+YVqhAvZSpgsfolPnSv5d0nz3vHslgUdK81RLzyvHcsi+WBNxQh4Ln8pw4Wi7skAg9mXgHMrEACXJnbHIllsbqGAtwXhnYswzFzwPWxWEPc2CexoobkHM4ZpD6s2loWiyIEEwCChIomMiMEHqgP573C9eHkc5VLWh3XsljnGVoLWVl+31bp38piTVVuihtPOAm9kcRLbrFjEvqwamtZLK5eI8sSan9rXEK0LcNFrY5oWawf59S7YSRD7eMAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"2x-trex\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAhAAAABeAgMAAAAPo8UvAAAADFBMVEX\/\/\/9TU1P39\/f\/\/\/+TS9URAAAAAXRSTlMAQObYZgAAASdJREFUeF7t1qFOBEEQRdEyGP7vGQy\/hsHc\/0MPSe8ylU2vKEIqqQnviRZXdI7pyUQuONda901FGAG6j8aa+6mDEUboHP01sk5EHHWEjt\/UY0dk\/U+Ir\/cdkXUEovV1GFF\/HQMR\/mLWEUYYYQRrf65XRhgB2595Y80lYRjCCG7AV\/IZ0FdDabgDhiKMgE+tAX01ES+ajDBCADpHZw0tRdaZCCNEGhCdNSSlQTEVYUROQGeNxxoxH2EErXU+wohdQXONqyBorDsixiB2Be01JiOM2BXQX1MRUxFGpAL6aypiMsIIJCFBtSK98fFYKd6wFDEbYUQgEYh6hTSkonbDDTAdYQTrKNd9QPWGUFwAYYRYR7U+XemGfB0ajTACWEe1Pl3thtxMhBHfOCEbEnR2KZcAAAAASUVORK5CYII=\" jstcache=\"0\">\r\n      <img id=\"2x-restart\" src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEgAAABAAgMAAADE0Nm5AAAACVBMVEX\/\/\/\/39\/dTU1OabbyfAAAAAXRSTlMAQObYZgAAAGNJREFUeF7d1CEOwDAMQ9GS3q\/ExPcz8Sm3gYBWVRo0afvwSQl0ax1To22JntKWupfGjriSXiLViCXCmXBHCykJTxaYEeIQGcVrHYklcoX8YYpSUggzcpBTiv5JtQWorUltmS6s4ZKtz2GgjAAAAABJRU5ErkJggg==\" jstcache=\"0\">\r\n    <\/div>\r\n    <template id=\"audio-resources\" jstcache=\"0\">\r\n      <audio id=\"offline-sound-press\" src=\"data:audio\/mpeg;base64,T2dnUwACAAAAAAAAAABVDxppAAAAABYzHfUBHgF2b3JiaXMAAAAAAkSsAAD\/\/\/\/\/AHcBAP\/\/\/\/+4AU9nZ1MAAAAAAAAAAAAAVQ8aaQEAAAC9PVXbEEf\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/+IDdm9yYmlzNwAAAEFPOyBhb1R1ViBiNSBbMjAwNjEwMjRdIChiYXNlZCBvbiBYaXBoLk9yZydzIGxpYlZvcmJpcykAAAAAAQV2b3JiaXMlQkNWAQBAAAAkcxgqRqVzFoQQGkJQGeMcQs5r7BlCTBGCHDJMW8slc5AhpKBCiFsogdCQVQAAQAAAh0F4FISKQQghhCU9WJKDJz0IIYSIOXgUhGlBCCGEEEIIIYQQQgghhEU5aJKDJ0EIHYTjMDgMg+U4+ByERTlYEIMnQegghA9CuJqDrDkIIYQkNUhQgwY56ByEwiwoioLEMLgWhAQ1KIyC5DDI1IMLQoiag0k1+BqEZ0F4FoRpQQghhCRBSJCDBkHIGIRGQViSgwY5uBSEy0GoGoQqOQgfhCA0ZBUAkAAAoKIoiqIoChAasgoAyAAAEEBRFMdxHMmRHMmxHAsIDVkFAAABAAgAAKBIiqRIjuRIkiRZkiVZkiVZkuaJqizLsizLsizLMhAasgoASAAAUFEMRXEUBwgNWQUAZAAACKA4iqVYiqVoiueIjgiEhqwCAIAAAAQAABA0Q1M8R5REz1RV17Zt27Zt27Zt27Zt27ZtW5ZlGQgNWQUAQAAAENJpZqkGiDADGQZCQ1YBAAgAAIARijDEgNCQVQAAQAAAgBhKDqIJrTnfnOOgWQ6aSrE5HZxItXmSm4q5Oeecc87J5pwxzjnnnKKcWQyaCa0555zEoFkKmgmtOeecJ7F50JoqrTnnnHHO6WCcEcY555wmrXmQmo21OeecBa1pjppLsTnnnEi5eVKbS7U555xzzjnnnHPOOeec6sXpHJwTzjnnnKi9uZab0MU555xPxunenBDOOeecc84555xzzjnnnCA0ZBUAAAQAQBCGjWHcKQjS52ggRhFiGjLpQffoMAkag5xC6tHoaKSUOggllXFSSicIDVkFAAACAEAIIYUUUkghhRRSSCGFFGKIIYYYcsopp6CCSiqpqKKMMssss8wyyyyzzDrsrLMOOwwxxBBDK63EUlNtNdZYa+4555qDtFZaa621UkoppZRSCkJDVgEAIAAABEIGGWSQUUghhRRiiCmnnHIKKqiA0JBVAAAgAIAAAAAAT\/Ic0REd0REd0REd0REd0fEczxElURIlURIt0zI101NFVXVl15Z1Wbd9W9iFXfd93fd93fh1YViWZVmWZVmWZVmWZVmWZVmWIDRkFQAAAgAAIIQQQkghhRRSSCnGGHPMOegklBAIDVkFAAACAAgAAABwFEdxHMmRHEmyJEvSJM3SLE\/zNE8TPVEURdM0VdEVXVE3bVE2ZdM1XVM2XVVWbVeWbVu2dduXZdv3fd\/3fd\/3fd\/3fd\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\/X\/Ofo9yCQZsoHL6\/5z9HuUSDNgAAAAACIDB4P\/BQA4NcAAHhzYgQAhyZEChScMgZPzmQwZwkcYjJguOaCaT6Sp\/Kand3Luej5yp9HApCHVtClzDUAdARABQMgC00kVNVxCUVrqo6QqCoqpkHqdBZaA+ViWsfXWfDxS00kVNVxDkVrqo6QqCjKoGkDPMI4eZeZZqpq8aZ9AMtNJFzVYQ1Fa6qNkKgqoiGrbSkmkbqXv3aIeKI\/3mh4gORh4cy6gShGMZVYJwm9SKkJkzqK64CkyLTGbMGExnzhyrNcyYMQl0nE4rwzDkq0+D\/PO1japBzB9E1XqdAUTVep0BnDStQJsDk7gaNQK5UeTMGgwzILIr00nCYH0Gd4wp1aAOEwlvhGwA2nl9c0KAu9LTJUSPIOXVyCVQpPP65oQAd6WnS4geQcqrkUugiC8QZa1eq9eqRUYCAFAWY\/oggB0gm5gFWYhtgB6gSIeJS8FxMiAGycBBm2ABURdHBNQRQF0JAJDJ8PhkMplMJtcxH+aYTMhkjut1vXIdkwEAHryuAQAgk\/lcyZXZ7Darzd2J3RBRoGf+V69evXJtviwAxOMBNqACAAIoAAAgM2tuRDEpAGAD0Khcc8kAQDgMAKDRbGlmFJENAACaaSYCoJkoAAA6mKlYAAA6TgBwxpkKAIDrBACdBAwA8LyGDACacTIRBoAA\/in9zlAB4aA4Vczai\/R\/roGKBP4+pd8ZKiAcFKeKWXuR\/s81UJHAn26QimqtBBQ2MW2QKUBUG+oBegpQ1GslgCIboA3IoId6DZeCg2QgkAyIQR3iYgwursY4RgGEH7\/rmjBQwUUVgziioIgrroJRBECGTxaUDEAgvF4nYCagzZa1WbJGkhlJGobRMJpMM0yT0Z\/6TFiwa\/WXHgAKwAABmgLQiOy5yTVDATQdAACaDYCKrDkyA4A2TgoAAB1mTgpAGycjAAAYZ0yjxAEAmQ6FcQWAR4cHAOhDKACAeGkA0WEaGABQSfYcWSMAHhn9f87rKPpQpe8viN3YXQ08cCAy+v+c11H0oUrfXxC7sbsaeOAAmaAXkPWQ6sBBKRAe\/UEYxiuPH7\/j9bo+M0cAE31NOzEaVBBMChqRNUdWWTIFGRpCZo7ssuXMUBwgACpJZcmZRQMFQJNxMgoCAGKcjNEAEnoDqEoD1t37wH7KXc7FayXfFzrSQHQ7nxi7yVsKXN6eo7ewMrL+kxn\/0wYf0gGXcpEoDSQI4CABFsAJ8AgeGf1\/zn9NcuIMGEBk9P85\/zXJiTNgAAAAPPz\/rwAEHBDgGqgSAgQQAuaOAHj6ELgGOaBqRSpIg+J0EC3U8kFGa5qapr41xuXsTB\/BpNn2BcPaFfV5vCYu12wisH\/m1IkQmqJLYAKBHAAQBRCgAR75\/H\/Of01yCQbiZkgoRD7\/n\/Nfk1yCgbgZEgoAAAAAEADBcPgHQRjEAR4Aj8HFGaAAeIATDng74SYAwgEn8BBHUxA4Tyi3ZtOwTfcbkBQ4DAImJ6AA\"><\/audio>\r\n      <audio id=\"offline-sound-hit\" src=\"data:audio\/mpeg;base64,T2dnUwACAAAAAAAAAABVDxppAAAAABYzHfUBHgF2b3JiaXMAAAAAAkSsAAD\/\/\/\/\/AHcBAP\/\/\/\/+4AU9nZ1MAAAAAAAAAAAAAVQ8aaQEAAAC9PVXbEEf\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/+IDdm9yYmlzNwAAAEFPOyBhb1R1ViBiNSBbMjAwNjEwMjRdIChiYXNlZCBvbiBYaXBoLk9yZydzIGxpYlZvcmJpcykAAAAAAQV2b3JiaXMlQkNWAQBAAAAkcxgqRqVzFoQQGkJQGeMcQs5r7BlCTBGCHDJMW8slc5AhpKBCiFsogdCQVQAAQAAAh0F4FISKQQghhCU9WJKDJz0IIYSIOXgUhGlBCCGEEEIIIYQQQgghhEU5aJKDJ0EIHYTjMDgMg+U4+ByERTlYEIMnQegghA9CuJqDrDkIIYQkNUhQgwY56ByEwiwoioLEMLgWhAQ1KIyC5DDI1IMLQoiag0k1+BqEZ0F4FoRpQQghhCRBSJCDBkHIGIRGQViSgwY5uBSEy0GoGoQqOQgfhCA0ZBUAkAAAoKIoiqIoChAasgoAyAAAEEBRFMdxHMmRHMmxHAsIDVkFAAABAAgAAKBIiqRIjuRIkiRZkiVZkiVZkuaJqizLsizLsizLMhAasgoASAAAUFEMRXEUBwgNWQUAZAAACKA4iqVYiqVoiueIjgiEhqwCAIAAAAQAABA0Q1M8R5REz1RV17Zt27Zt27Zt27Zt27ZtW5ZlGQgNWQUAQAAAENJpZqkGiDADGQZCQ1YBAAgAAIARijDEgNCQVQAAQAAAgBhKDqIJrTnfnOOgWQ6aSrE5HZxItXmSm4q5Oeecc87J5pwxzjnnnKKcWQyaCa0555zEoFkKmgmtOeecJ7F50JoqrTnnnHHO6WCcEcY555wmrXmQmo21OeecBa1pjppLsTnnnEi5eVKbS7U555xzzjnnnHPOOeec6sXpHJwTzjnnnKi9uZab0MU555xPxunenBDOOeecc84555xzzjnnnCA0ZBUAAAQAQBCGjWHcKQjS52ggRhFiGjLpQffoMAkag5xC6tHoaKSUOggllXFSSicIDVkFAAACAEAIIYUUUkghhRRSSCGFFGKIIYYYcsopp6CCSiqpqKKMMssss8wyyyyzzDrsrLMOOwwxxBBDK63EUlNtNdZYa+4555qDtFZaa621UkoppZRSCkJDVgEAIAAABEIGGWSQUUghhRRiiCmnnHIKKqiA0JBVAAAgAIAAAAAAT\/Ic0REd0REd0REd0REd0fEczxElURIlURIt0zI101NFVXVl15Z1Wbd9W9iFXfd93fd93fh1YViWZVmWZVmWZVmWZVmWZVmWIDRkFQAAAgAAIIQQQkghhRRSSCnGGHPMOegklBAIDVkFAAACAAgAAABwFEdxHMmRHEmyJEvSJM3SLE\/zNE8TPVEURdM0VdEVXVE3bVE2ZdM1XVM2XVVWbVeWbVu2dduXZdv3fd\/3fd\/3fd\/3fd\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\/\/lzx+Xw+X3x8fCQSiWggDAA83UXF6\/vpLipe3zsCULWMBE5PMTBMlsv39\/f39\/f39524nZ13CDgaRFuLYTbaWgyzq22MzEyKolIpst50Z9PGqqJSq8T2++taLf3+oqg6btyouhEjYlxFjXxex1wCBFxcv+PmzG1uc2bKyJFLLlkizZozZ\/ZURpZs2TKiWbNnz5rKyJItS0akWbNnzdrIyJJtxmCczpxOATRRhoPimyjDQfEfIFMprQDU3WFYbXZLZZxMhxrGyRh99Uqel55XEk+9efP7I\/FU\/8Ojew4JNN\/rTq6b73Un1x+AVSsCWD2tNqtpGOM4DOM4GV7n5th453cXNGcfAYQKTFEOguKnKAdB8btRLxNBWUrViLoY1\/q1er+Q9xkvZM\/IjaoRf30xu3HLnr61fu3UBDRZHZdqsjoutQeAVesAxNMTw2rR66X\/Ix6\/T5tx80+t\/D67ipt\/q5XfJzTfa03Wzfdak\/UeAEpZawlsbharxTBVO1+c2nm\/7\/f1XR1dY8XaKWMH3aW9xvEFRFEksXgURRKLn7VamSFRVnYXg0C2Zo2MNE3+57u+e3NFlVev1uufX6nU3Lnf9d1j4wE03+sObprvdQc3ewBYFIArAtjdrRaraRivX7x+8VrbHIofG0n6cFwtNFKYBzxXA2j4uRpAw7dJRkSETBkZV1V1o+N0Op1WhmEyDOn36437RbKvl7zz838wgn295Iv8\/Ac8UaRIPFGkSHyAzCItAXY3dzGsNueM6VDDOJkOY3QYX008L6vnfZp\/3qf559VQL3Xm1SEFNN2fiMA03Z+IwOwBoKplAKY4TbGIec0111x99dXr9XrjZ\/nzdSWXBekAHEsWp4ljyeI0sVs2FEGiLFLj7rjxeqG8Pm+tX\/uW90b+DX31bVTF\/I+Ut+\/sM1IA\/MyILvUzI7rUbpNqyIBVjSDGVV\/Jo\/9H6G\/jq+5y3Pzb7P74Znf5ffZtApI5\/fN5SAcHjIhB5vTP5yEdHDAiBt4oK\/WGeqUMMspeTNsGk\/H\/PziIgCrG1Rijktfreh2vn4DH78WXa25yZkizZc9oM7JmaYeZM6bJOJkOxmE69Hmp\/q\/k0fvVRLln3H6fXcXNPt78W638Ptlxsytv\/pHyW7Pfp1Xc7L5XfqvZb5MdN7vy5p\/u8lut\/D6t4mb3vfmnVn6bNt9nV3Hzj1d+q9lv02bc7Mqbf6vZb+N23OzKm73u8lOz3+fY3uwqLv1022+THTepN38yf7XyW1aX8YqjACWfDTiAA+BQALTURU0oCFpLXdSEgqAJpAKxrLtzybNt1Go5VeJAASzRnh75Eu3pke8BYNWiCIBVLdgsXMqlXBJijDGW2Sj5lUqlSJFpPN9fAf08318B\/ewBUMUiA3h4YGIaooZrfn5+fn5+fn5+fn6mtQYKcQE8WVg5YfJkYeWEyWqblCIiiqKoVGq1WqxWWa3X6\/V6vVoty0zrptXq9\/u4ccS4GjWKGxcM6ogaNWpUnoDf73Xd3OQml2xZMhJNM7Nmz54zZ\/bsWbNmphVJRpYs2bJly5YtS0YSoWlm1uzZc+bMnj17ZloATNNI4PbTNBK4\/W5jlJGglFJWI4hR\/levXr06RuJ5+fLly6Ln1atXxxD18uXLKnr+V8cI8\/M03+vErpvvdWLXewBYxVoC9bBZDcPU3Bevtc399UWNtZH0p4MJZov7AkxThBmYpggzcNVCJqxIRQwiLpNBxxqUt\/NvuCqmb2Poa+RftCr7DO3te16HBjzbulL22daVsnsAqKIFwMXVzbCLYdVe9vGovzx9xP7469mk3L05d1+qjyKuPAY8397G2PPtbYztAWDVQgCH09MwTTG+Us67nX1fG5G+0o3YvspGtK+yfBmqAExTJDHQaYokBnrrZZEZkqoa3BjFDJlmGA17PF+qE\/GbJd3xm0V38qoYT\/aLuTzh6w\/ST\/j6g\/QHYBVgKYHTxcVqGKY5DOM4DNNRO3OXkM0JmAto6AE01xBa5OYaQou8B4BmRssAUNQ0TfP169fv169fvz6XSIZhGIbJixcvXrzIFP7+\/3\/9evc\/wyMAVFM8EEOvpngghr5by8hIsqiqBjXGXx0T4zCdTCfj8PJl1fy83vv7q1fHvEubn5+fnwc84etOrp\/wdSfXewBUsRDA5upqMU1DNl+\/GNunkTDUGrWzn0BDIC5UUw7CwKspB2HgVzVFSFZ1R9QxU8MkHXvLGV8jKxtjv6J9G0N\/MX1fIysbQzTdOlK26daRsnsAWLUGWFxcTQum8Skv93j2KLpfjSeb3fvFmM3xt3L3\/mwCPN\/2Rvb5tjeyewBULQGmzdM0DMzS3vEVHVu6MVTZGNn3Fe37WjxU2RjqAUxThJGfpggjv1uLDAlVdeOIGNH\/1P9Q5\/Jxvf49nmyOj74quveLufGb4zzh685unvB1Zzd7AFQAWAhguLpaTFNk8\/1i7Ni+Oq5BxQVcGABEVcgFXo+qkAu8vlurZiaoqiNi3N2Z94sXL168ePEiR4wYMWLEiBEjRowYMWLEiBEjAFRVtGm4qqJNw7ceGRkZrGpQNW58OozDOIzDy5dV8\/Pz8\/Pz8\/Pz8\/Pz8\/Pz8\/NlPN\/rDr6f73UH33sAVLGUwHRxsxqGaq72+tcvy5LsLLZ5JdBo0BdUU7Qgr6ZoQb4NqKon4PH6zfFknHYYjOqLT9XaWdkYWvQr2vcV7fuK9n3F9AEs3SZSduk2kbJ7AKhqBeDm7maYaujzKS8\/0f\/UJ\/eL7v2ie7\/o3rfHk83xBDzdZlLu6TaTcnsAWLUAYHcz1KqivUt7V\/ZQZWPoX7TvK9r3a6iyMVSJ6QNMUaSQnaJIIXvrGSkSVTWIihsZpsmYjKJ\/8vTxvC6694sxm+PJ5vhbuXu\/ADzf6w5+nu91Bz97AFi1lACHm9UwVHPztbbpkiKHJVsy2SAcDURTFhZc0ZSFBdeqNqiKQXwej8dxXrx48eLFixcvXrx4oY3g8\/\/\/\/\/\/\/\/\/+voo3IF3cCRE\/xjoLoKd5RsPUCKVN9jt\/v8TruMJ1MJ9PJ6E3z8y9fvnz58uXLly+rSp+Z+V+9ejXv7+8eukl9XpcPJED4YJP6vC4fSIDwgWN7vdDrmfT\/\/4PHDfg98ns9\/qDHnBxps2RPkuw5ciYZOXPJmSFrllSSNVumJDNLphgno2E6GQ3jUBmPeOn\/KP11zY6bfxvfjCu\/TSuv\/Datustxs0\/Njpt9anbc7Nv4yiu\/TSuv\/Datustxs0\/Njpt9aptx82\/jm175bVp55bfZ\/e5y3OxT24ybfWqbcfNv08orv00rr\/w27dfsuNmnthk3+7SVV36bVl75bVqJnUxPzXazT0294mnq2W+TikmmE5LiQb3pAa94mnpFAGxeSf1\/jn9mWTgDBjhUUv+f459ZFs6AAQ4AAAAAAIAH\/0EYBHEAB6gDzBkAAUxWjEAQk7nWaBZuuKvBN6iqkoMah7sAhnRZ6lFjmllwEgGCAde2zYBzAB5AAH5J\/X+Of81ycQZMHI0uqf\/P8a9ZLs6AiaMRAAAAAAIAOPgPw0EUEIddhEaDphAAjAhrrgAUlNDwPZKFEPFz2JKV4FqHl6tIxjaQDfQAiJqgZk1GDQgcBuAAfkn9f45\/zXLiDBgwuqT+P8e\/ZjlxBgwYAQAAAAAAg\/8fDBlCDUeGDICqAJAT585AAALkhkHxIHMR3AF8IwmgWZwQhv0DcpcIMeTjToEGKDQAB0CEACgAfkn9f45\/LXLiDCiMxpfU\/+f41yInzoDCaAwAAAAEg4P\/wyANDgAEhDsAujhQcBgAHEakAKBZjwHgANMYAkIDo+L8wDUrrgHpWnPwBBoJGZqDBmBAUAB1QANeOf1\/zn53uYQA9ckctMrp\/3P2u8slBKhP5qABAAAAAACAIAyCIAiD8DAMwoADzgECAA0wQFMAiMtgo6AATVGAE0gADAQA\"><\/audio>\r\n      <audio id=\"offline-sound-reached\" src=\"data:audio\/mpeg;base64,T2dnUwACAAAAAAAAAABVDxppAAAAABYzHfUBHgF2b3JiaXMAAAAAAkSsAAD\/\/\/\/\/AHcBAP\/\/\/\/+4AU9nZ1MAAAAAAAAAAAAAVQ8aaQEAAAC9PVXbEEf\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/+IDdm9yYmlzNwAAAEFPOyBhb1R1ViBiNSBbMjAwNjEwMjRdIChiYXNlZCBvbiBYaXBoLk9yZydzIGxpYlZvcmJpcykAAAAAAQV2b3JiaXMlQkNWAQBAAAAkcxgqRqVzFoQQGkJQGeMcQs5r7BlCTBGCHDJMW8slc5AhpKBCiFsogdCQVQAAQAAAh0F4FISKQQghhCU9WJKDJz0IIYSIOXgUhGlBCCGEEEIIIYQQQgghhEU5aJKDJ0EIHYTjMDgMg+U4+ByERTlYEIMnQegghA9CuJqDrDkIIYQkNUhQgwY56ByEwiwoioLEMLgWhAQ1KIyC5DDI1IMLQoiag0k1+BqEZ0F4FoRpQQghhCRBSJCDBkHIGIRGQViSgwY5uBSEy0GoGoQqOQgfhCA0ZBUAkAAAoKIoiqIoChAasgoAyAAAEEBRFMdxHMmRHMmxHAsIDVkFAAABAAgAAKBIiqRIjuRIkiRZkiVZkiVZkuaJqizLsizLsizLMhAasgoASAAAUFEMRXEUBwgNWQUAZAAACKA4iqVYiqVoiueIjgiEhqwCAIAAAAQAABA0Q1M8R5REz1RV17Zt27Zt27Zt27Zt27ZtW5ZlGQgNWQUAQAAAENJpZqkGiDADGQZCQ1YBAAgAAIARijDEgNCQVQAAQAAAgBhKDqIJrTnfnOOgWQ6aSrE5HZxItXmSm4q5Oeecc87J5pwxzjnnnKKcWQyaCa0555zEoFkKmgmtOeecJ7F50JoqrTnnnHHO6WCcEcY555wmrXmQmo21OeecBa1pjppLsTnnnEi5eVKbS7U555xzzjnnnHPOOeec6sXpHJwTzjnnnKi9uZab0MU555xPxunenBDOOeecc84555xzzjnnnCA0ZBUAAAQAQBCGjWHcKQjS52ggRhFiGjLpQffoMAkag5xC6tHoaKSUOggllXFSSicIDVkFAAACAEAIIYUUUkghhRRSSCGFFGKIIYYYcsopp6CCSiqpqKKMMssss8wyyyyzzDrsrLMOOwwxxBBDK63EUlNtNdZYa+4555qDtFZaa621UkoppZRSCkJDVgEAIAAABEIGGWSQUUghhRRiiCmnnHIKKqiA0JBVAAAgAIAAAAAAT\/Ic0REd0REd0REd0REd0fEczxElURIlURIt0zI101NFVXVl15Z1Wbd9W9iFXfd93fd93fh1YViWZVmWZVmWZVmWZVmWZVmWIDRkFQAAAgAAIIQQQkghhRRSSCnGGHPMOegklBAIDVkFAAACAAgAAABwFEdxHMmRHEmyJEvSJM3SLE\/zNE8TPVEURdM0VdEVXVE3bVE2ZdM1XVM2XVVWbVeWbVu2dduXZdv3fd\/3fd\/3fd\/3fd\/3fV0HQkNWAQASAAA6kiMpkiIpkuM4jiRJQGjIKgBABgBAAACK4iiO4ziSJEmSJWmSZ3mWqJma6ZmeKqpAaMgqAAAQAEAAAAAAAACKpniKqXiKqHiO6IiSaJmWqKmaK8qm7Lqu67qu67qu67qu67qu67qu67qu67qu67qu67qu67qu67quC4SGrAIAJAAAdCRHciRHUiRFUiRHcoDQkFUAgAwAgAAAHMMxJEVyLMvSNE\/zNE8TPdETPdNTRVd0gdCQVQAAIACAAAAAAAAADMmwFMvRHE0SJdVSLVVTLdVSRdVTVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTdM0TRMIDVkJAJABAKAQW0utxdwJahxi0nLMJHROYhCqsQgiR7W3yjGlHMWeGoiUURJ7qihjiknMMbTQKSet1lI6hRSkmFMKFVIOWiA0ZIUAEJoB4HAcQLIsQLI0AAAAAAAAAJA0DdA8D7A8DwAAAAAAAAAkTQMsTwM0zwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQNI0QPM8QPM8AAAAAAAAANA8D\/BEEfBEEQAAAAAAAAAszwM80QM8UQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwNE0QPM8QPM8AAAAAAAAALA8D\/BEEfA8EQAAAAAAAAA0zwgAAAQYCEUGrIiAIgTADA4DjQNmgbPAziWBc+D50EUAY5lwfPgeRBFAAAAAAAAAAAAADTPg6pCVeGqAM3zYKpQVaguAAAAAAAAAAAAAJbnQVWhqnBdgOV5MFWYKlQVAAAAAAAAAAAAAE8UobpQXbgqwDNFuCpcFaoLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABhwAAAIMKEMFBqyIgCIEwBwOIplAQCA4ziWBQAAjuNYFgAAWJYligAAYFmaKAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAGHAAAAgwoQwUGrISAIgCADAoimUBy7IsYFmWBTTNsgCWBtA8gOcBRBEACAAAKHAAAAiwQVNicYBCQ1YCAFEAAAZFsSxNE0WapmmaJoo0TdM0TRR5nqZ5nmlC0zzPNCGKnmeaEEXPM02YpiiqKhBFVRUAAFDgAAAQYIOmxOIAhYasBABCAgAMjmJZnieKoiiKpqmqNE3TPE8URdE0VdVVaZqmeZ4oiqJpqqrq8jxNE0XTFEXTVFXXhaaJommaommqquvC80TRNE1TVVXVdeF5omiapqmqruu6EEVRNE3TVFXXdV0giqZpmqrqurIMRNE0VVVVXVeWgSiapqqqquvKMjBN01RV15VdWQaYpqq6rizLMkBVXdd1ZVm2Aarquq4ry7INcF3XlWVZtm0ArivLsmzbAgAADhwAAAKMoJOMKouw0YQLD0ChISsCgCgAAMAYphRTyjAmIaQQGsYkhBJCJiWVlEqqIKRSUikVhFRSKiWjklJqKVUQUikplQpCKqWVVAAA2IEDANiBhVBoyEoAIA8AgCBGKcYYYwwyphRjzjkHlVKKMeeck4wxxphzzkkpGWPMOeeklIw555xzUkrmnHPOOSmlc84555yUUkrnnHNOSiklhM45J6WU0jnnnBMAAFTgAAAQYKPI5gQjQYWGrAQAUgEADI5jWZqmaZ4nipYkaZrneZ4omqZmSZrmeZ4niqbJ8zxPFEXRNFWV53meKIqiaaoq1xVF0zRNVVVVsiyKpmmaquq6ME3TVFXXdWWYpmmqquu6LmzbVFXVdWUZtq2aqiq7sgxcV3Vl17aB67qu7Nq2AADwBAcAoAIbVkc4KRoLLDRkJQCQAQBAGIOMQgghhRBCCiGElFIICQAAGHAAAAgwoQwUGrISAEgFAACQsdZaa6211kBHKaWUUkqpcIxSSimllFJKKaWUUkoppZRKSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoFAC5VOADoPtiwOsJJ0VhgoSErAYBUAADAGKWYck5CKRVCjDkmIaUWK4QYc05KSjEWzzkHoZTWWiyecw5CKa3FWFTqnJSUWoqtqBQyKSml1mIQwpSUWmultSCEKqnEllprQQhdU2opltiCELa2klKMMQbhg4+xlVhqDD74IFsrMdVaAABmgwMARIINqyOcFI0FFhqyEgAICQAgjFGKMcYYc8455yRjjDHmnHMQQgihZIwx55xzDkIIIZTOOeeccxBCCCGEUkrHnHMOQgghhFBS6pxzEEIIoYQQSiqdcw5CCCGEUkpJpXMQQgihhFBCSSWl1DkIIYQQQikppZRCCCGEEkIoJaWUUgghhBBCKKGklFIKIYRSQgillJRSSimFEEoIpZSSUkkppRJKCSGEUlJJKaUUQggllFJKKimllEoJoYRSSimlpJRSSiGUUEIpBQAAHDgAAAQYQScZVRZhowkXHoBCQ1YCAGQAAJSyUkoorVVAIqUYpNpCR5mDFHOJLHMMWs2lYg4pBq2GyjGlGLQWMgiZUkxKCSV1TCknLcWYSuecpJhzjaVzEAAAAEEAgICQAAADBAUzAMDgAOFzEHQCBEcbAIAgRGaIRMNCcHhQCRARUwFAYoJCLgBUWFykXVxAlwEu6OKuAyEEIQhBLA6ggAQcnHDDE294wg1O0CkqdSAAAAAAAAwA8AAAkFwAERHRzGFkaGxwdHh8gISIjJAIAAAAAAAYAHwAACQlQERENHMYGRobHB0eHyAhIiMkAQCAAAIAAAAAIIAABAQEAAAAAAACAAAABARPZ2dTAABARwAAAAAAAFUPGmkCAAAAZa2xyCElHh4dHyQvOP8T5v8NOEo2\/wPOytDN39XY2P8N\/w2XhoCs0CKt8NEKLdIKH63ShlVlwuuiLze+3BjtjfZGe0lf6As9ggZstNJFphRUtpUuMqWgsqrasj2IhOA1F7LFMdFaWzkAtNBFpisIQgtdZLqCIKjqAAa9WePLkKr1MMG1FlwGtNJFTSkIcitd1JSCIKsCAQWISK0Cyzw147T1tAK00kVNKKjQVrqoCQUVqqr412m+VKtZf9h+TDaaztAAtNRFzVEQlJa6qDkKgiIrc2gtfES4nSQ1mlvfMxfX4+b2t7ICVNGwkKiiYSGxTQtK1YArN+DgTqdjMwyD1q8dL6RfOzXZ0yO+qkZ8+Ub81WP+DwNkWcJhvlmWcJjvSbUK\/WVm3LgxClkyiuxpIFtS5Gwi5FBkj2DGWEyHYBiLcRJkWnQSZGbRGYGZAHr6vWVJAWGE5q724ldv\/B8Kp5II3dPvLUsKCCM0d7UXv3rj\/1A4lUTo+kCUtXqtWimLssjIyMioViORobCJAQLYFnpaAACCAKEWAMCiQGqMABAIUKknAFkUIGsBIBBAHYBtgAFksAFsEySQgQDWQ4J1AOpiVBUHd1FE1d2IGDfGAUzmKiiTyWQyuY6Lx\/W4jgkQZQKioqKuqioAiIqKwagqCqKiogYxCgACCiKoAAAIqAuKAgAgjyeICQAAvAEXmQAAmYNhMgDAZD5MJqYzppPpZDqMwzg0TVU9epXf39\/9xw5lBaCpqJiG3VOsht0wRd8FgAeoB8APKOABQFT23GY0GgoAolkyckajHgBoZEYujQY+230BUoD\/uf31br\/7qCHLXLWwIjMIz3ZfgBTgf25\/vdvvPmrIMlctrMgMwiwCAAB4FgAAggAAAM8CAEAgkNG0DgCeBQCAIAAAmEUBynoASKANMIAMNoBtAAlkMAGoAzKQgDoAdQYAKOoEANFgAoAyKwAAGIOiAACVBACyAAAAFYMDAAAyxyMAAMBMfgQAAMi8GAAACDfoFQAAYHgxACA16QiK4CoWcTcVAADDdNpc7AAAgJun080DAAAwPTwxDQAAxYanm1UFAAAVD0MsAA4AyCUztwBwBgAyQOTMTZYA0AAiySW3Clar\/eRUAb5fPDXA75e8QH\/\/jkogHmq1n5wqwPeLpwb4\/ZIX6O\/fUQnEgwf9fr\/f72dmZmoaRUREhMLTADSVgCAgVLKaCT0tAABk2AFgAyQgEEDTSABtQiSQwQDUARksYBtAAgm2AQSQYBtAAuYPOK5rchyPLxAABFej4O7uAIgYNUYVEBExbozBGHdVgEoCYGZmAceDI0mGmZlrwYDHkQQAiLhxo6oKSHJk\/oBrZgYASI4XAwDAXMMnIQAA5DoyDAAACa8AAMDM5JPEZDIZhiFJoN33vj4X6N19v15gxH8fAE1ERMShbm5iBYCOAAMFgAzaZs3ITURECAAhInKTNbNtfQDQNnuWHBERFgBUVa4iDqyqXEUc+AKkZlkmZCoJgIOBBaubqwoZ2SDNgJlj5MgsMrIV44xgKjCFYTS36QRGQafwylRZAhMXr7IEJi7+AqQ+gajAim2S1W\/71ACEi4sIxsXVkSNDQRkgzGp6eNgMJDO7kiVXcmStkCVL0Ry0MzMgzRklI2dLliQNEbkUVFvaCApWW9oICq7rpRlKs2MBn8eVJRlk5JARjONMdGSYZArDOA0ZeKHD6+KN9oZ5MBDTCO8bmrptBBLgcnnOcBmk\/KMhS2lL6rYRSIDL5TnDZZDyj4YspS3eIOoN9Uq1KIsMpp1gsU0gm412AISQyICYRYmsFQCQwWIgwWRCABASGRDawAKYxcCAyYQFgLhB1Rg17iboGF6v1+fIcR2TyeR4PF7HdVzHdVzHcYXPbzIAQNTFuBoVBQAADJOL15WBhNcFAADAI9cAAAAAAJAEmIsMAOBlvdTLVcg4mTnJzBnTobzDfKPRaDSaI1IAnUyHhr6LALxFo5FmyZlL1kAU5lW+LIBGo9lym1OF5ikAOsyctGkK8fgfAfgPIQDAvBLgmVsGoM01lwRAvCwAHje0zTiA\/oUDAOYAHqv9+AQC4gEDMJ\/bIrXsH0Ggyh4rHKv9+AQC4gEDMJ\/bIrXsH0Ggyh4rDPUsAADAogBCk3oCQBAAAABBAAAg6FkAANCzAAAgBELTAACGQAAoGoFBFoWoAQDaBPoBQ0KdAQAAAK7iqkAVAABQNixAoRoAAKgE4CAiAAAAACAYow6IGjcAAAAAAPL4DfZ6kkZkprlkj6ACu7i7u5sKAAAOd7vhAAAAAEBxt6m6CjSAgKrFasUOAAAoAABic\/d0EwPIBjAA0CAggABojlxzLQD+mv34BQXEBQvYH5sijDr0\/FvZOwu\/Zj9+QQFxwQL2x6YIow49\/1b2zsI9CwAAeBYAAIBANGlSDQAABAEAAKBnIQEAeloAABgCCU0AAEMgAGQTYNAG+gCwAeiBIWMAGmYAAICogRg16gAAABB1gwVkNlgAAIDIGnCMOwIAAACAgmPA8CpgBgAAAIDMG\/QbII\/PLwAAaKN9vl4Pd3G6maoAAAAAapiKaQUAANPTxdXhJkAWXHBzcRcFAAAHAABqNx2YEQAHHIADOAEAvpp9fyMBscACmc9Lku7s1RPB+kdWs+9vJCAWWCDzeUnSnb16Ilj\/CNOzAACAZwEAAAhEk6ZVAAAIAgAAQc8CAICeFgAAhiAAABgCAUAjMGgDPQB6CgCikmDIGIDqCAAAkDUQdzUOAAAAKg3WIKsCAABkFkAJAAAAQFzFQXh8QQMAAAAABCMCKEhAAACAkXcOo6bDxCgqOMXV6SoKAAAAoGrabDYrAAAiHq5Ww80EBMiIi01tNgEAAAwAAKiHGGpRQADUKpgGAAAOEABogFFAAN6K\/fghBIQ5cH0+roo0efVEquyBaMV+\/BACwhy4Ph9XRZq8eiJV9kCQ9SwAAMCiAGhaDwAIAgAAIAgAAAQ9CwAAehYAAIQgAAAYAgGgaAAGWRTKBgBAG4AMADI2ANVFAAAAgKNqFKgGAACKRkpQqAEAgCKBAgAAAIAibkDFuDEAAAAAYODzA1iQoAEAAI3+ZYOMNls0AoEdN1dPiwIAgNNp2JwAAAAAYHgaLoa7QgNwgKeImAoAAA4AALU5XNxFoYFaVNxMAQCAjADAAQaeav34QgLiAQM4H1dNGbXoH8EIlT2SUKr14wsJiAcM4HxcNWXUon8EI1T2SEJMzwIAgJ4FAAAgCAAAhCAAABD0LAAA6GkBAEAIAgCAIRAAqvUAgywK2QgAyKIAoBEYAiGqCQB1BQAAqCNAmQEAAOqGFZANCwAAoBpQJgAAAKDiuIIqGAcAAAAA3Ig64LgoAADQHJ+WmYbJdMzQBsGuVk83mwIAAAIAgFNMV1cBUz1xKAAAgAEAwHR3sVldBRxAQD0d6uo0FAAADAAA6orNpqIAkMFqqMNAAQADKABkICgAfmr9+AUFxB0ANh+vita64VdPLCP9acKn1o9fUEDcAWDz8aporRt+9cQy0p8mjHsWAADwLAAAAEEAAAAEAQCAoGchAAD0LAAADIHQpAIADIEAUCsSDNpACwA2AK2EIaOVgLoCAACUBZCVAACAKBssIMqGFQAAoKoAjIMLAAAAAAgYIyB8BAUAAAAACPMJkN91ZAAA5O6kwzCtdAyIVd0cLi4KAAAAIFbD4uFiAbW5mu42AAAAAFBPwd1DoIEjgNNF7W4WQAEABwACODxdPcXIAAIHAEEBflr9\/A0FxAULtD9eJWl006snRuXfq8Rp9fM3FBAXLND+eJWk0U2vnhiVf68STM8CAACeBQAAIAgAAIAgAAAQ9CwAAOhpAQBgCITGOgAwBAJAYwYYZFGoFgEAZFEAKCsBhkDIGgAoqwAAAFVAVCUAAKhU1aCIhgAAIMoacKNGVAEAAABwRBRQXEUUAAAAABUxCGAMRgAAAABNpWMnaZOWmGpxt7kAAAAAIBimq9pAbOLuYgMAAAAAww0300VBgAMRD0+HmAAAZAAAAKvdZsNUAAcoaAAgA04BXkr9+EIC4gQD2J\/XRWjmV0\/syr0xpdSPLyQgTjCA\/XldhGZ+9cSu3BvD9CwAAOBZAAAAggAAAAgCgAQIehYAAPQsAAAIQQAAMAQCQJNMMMiiUDTNBABZFACyHmBIyCoAACAKoCIBACCLBjMhGxYAACCzAhQFAAAAYMBRFMUYAwAAAAAorg5gPZTJOI4yzhiM0hI1TZvhBgAAAIAY4mZxNcBQV1dXAAAAAAA3u4u7h4ICIYOni7u7qwGAAqAAAIhaHKI2ICCGXe2mAQBAgwwAAQIKQK6ZuREA\/hm9dyCg9xrQforH3TSBf2dENdKfM5\/RewcCeq8B7ad43E0T+HdGVCP9OWN6WgAA5CkANERJCAYAAIBgAADIAD0LAAB6WgAAmCBCUW8sAMAQCEBqWouAQRZFaigBgDaBSBgCIeoBAFkAwAiou6s4LqqIGgAAKMsKKKsCAAColIgbQV3ECAAACIBRQVzVjYhBVQEAAADJ55chBhUXEQEAIgmZOXNmTSNLthmTjNOZM8cMw2RIa9pdPRx2Q01VBZGNquHTq2oALBfQxKcAh\/zVDReL4SEqIgBAbqcKYhiGgdXqblocygIAdL6s7qbaDKfdNE0FAQ4AVFVxeLi7W51DAgIAAwSWDoAPoHUAAt6YvDUqoHcE7If29ZNi2H\/k+ir\/85yQNiZvjQroHQH7oX39pBj2H7m+yv88J6QWi7cXgKFPJtNOABIEEGVEvUljJckAbdhetBOgpwFkZFbqtWqAUBgysL2AQR2gHoDYE3Dld12P18HkOuY1r+M4Hr\/HAAAVBRejiCN4HE\/QLOAGPJhMgAJi1BhXgwCAyZUCmOuHZuTMkTUia47sGdIs2TPajKwZqUiTNOKl\/1fyvHS8fOn\/1QGU+5U0SaOSzCxpmiNntsxI0LhZ+\/0dmt1CVf8HNAXKl24AoM0D7jsIAMAASbPkmpvssuTMktIgALMAUESaJXuGzCyZQQBwgEZl5JqbnBlvgIyT0TAdSgG+6Px\/rn+NclEGFGDR+f9c\/xrlogwoAKjPiKKfIvRhGKYgzZLZbDkz2hC4djgeCVkXEKJlXz1uAosCujLkrDz6p0CZorVVOjvIQOAp3aVcLyCErGACSRKImCRMETeKzA6cFNd2X3KG1pyLgOnTDtnHXMSpVY1A6IXSjlNoh70ubc2VzXgfgd6uEQOBEmCt1O4wOHBQB2ANvtj8f65\/jXKiAkiwWGz+P9e\/RjlRASRYAODhfxqlH5QGhuxAobUGtOqEll3GqBEhYLIJQLMr6oQooHFcGpIsDK4yPg3UfMJtO\/hTFVma3lrt+JI\/EFBxbvlT2OiH0mhEfBofQDudLtq0lTiGSOKaVl6peD3XTDACuSXYNQAp4JoD7wjgUAC+2Px\/rn+NcqIMKDBebP4\/179GOVEGFBgDQPD\/fxBW4I7k5DEgDtxdcwFpcNNx+JoDICRCTtO253ANTbn7DmF+TXalagLadQ23yhGw1Pj7SzpOajGmpeeYyqUY1\/Y6KfuTVOU5cvu0gW2boGlMfFv5TejrOmkOl0iEpuQMpAYBB09nZ1MABINhAAAAAAAAVQ8aaQMAAAB\/dp+bB5afkaKgrlp+2Px\/rn+NchECSMBh8\/+5\/jXKRQggAQAI\/tMRHf0LRqDj05brTRlASvIy1PwPFcajBhcoY0BtuEqvBZw0c0jJRaZ4n0f7fOKW0Y8QZ\/M7xFeaGJktZ2ePGFTOLl4XzRCQMnJET4bVsFhMiiHf5vXtJ9vtMsf\/Wzy030v3dqzCbkfN7af9JmpkTSXXICMpLAVO16AZoAF+2Px\/rn91uQgGDOCw+f9c\/+pyEQwYAACCH51SxFCg6SCEBi5Yzvla\/iwJC4ekcPjs4PTWuY3tqJ0BKbo3cSYE4Oxo+TYjMXbYRhO+7lamNITiY2u0SUbFcZRMTaC5sUlWteBp+ZP4wUl9lzksq8hUQ5JOZZBAjfd98+8O6pvScEnEsrp\/Z5BczwfWpkx5PwQ37EoIH7fMBgYGgusZAQN+2Px\/rn91uQgGFOCw+f9c\/+pyEQwoAPD\/I8YfOD1cxsESTiLRCq0XjEpMtryCW+ZYCL2OrG5\/pdkExMrQmjY9KVY4h4vfDR0No9dovrC2mxka1Pr0+Mu09SplWO6YXqWclpXdoVKuagQllrWfCaGA0R7bvLk41ZsRTBiieZFaqyFRFbasq0GwHT0MKbUIB2QAftj8f65\/NbkIAQxwOGz+P9e\/mlyEAAY4gEcfPYMyMh8UBxBogIAtTU0qrERaVBLhCkJQ3MmgzZNrxplCg6xVj5AdH8J2IE3bUNgyuD86evYivJmI+NREqmWbKqosI6xblSnNmJJUum+0qsMe4o8fIeCXELdErT52+KQtXSIl3XJNKOKv3BnKtS2cKmmnGpCqP\/5YNQ9MCB2P8VUnCJiYDEAAXrj8f65\/jXIiGJCAwuX\/c\/1rlBPBgAQA\/ymlCDEi+hsNB2RoT865unFOQZiOpcy11YPQ6BiMettS0AZ0JqI4PV\/Neludd25CqZDuiL82RhzdohJXt36nH+HlZiHE5ILqVSQL+T5\/0h9qFzBVn0OFT9herDG3XzXz299VNY2RkejrK96EGyybKbXyG3IUUv5QEvq2bAP5CjJa9IiDeD5OOF64\/H8uf3W5lAAmULj8fy5\/dbmUACYAPEIfUcpgMGh0GgjCGlzQcHwGnb9HCrHg86LPrV1SbrhY+nX\/N41X2DMb5NsNtkcRS9rs95w9uDtvP+KP\/MupnfH3yHIbPG\/1zDBygJimTvFcZywqne6OX18E1zluma5AShnVx4aqfxLo6K\/C8P2fxH5cuaqtqE3Lbru4hT4283zc0Hqv2xINtisxZXBVfQuOAK6kCHjBAF6o\/H+uf09ycQK6w6IA40Ll\/3P9e5KLE9AdFgUYAwAAAgAAgDD4g+AgXAEEyAAEoADiPAAIcHGccHEAxN271+bn5+dt4B2YmGziAIrZMgZ4l2nedkACHggIAA==\"><\/audio>\r\n    <\/template>\r\n  <\/div>\r\n\r\n  <script type=\"text\/javascript\">\r\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\r\n      new Runner('.interstitial-wrapper');\r\n    } else {\r\n      document.getElementById(\"main-frame-notchrome\").style.display=\"\";\r\n\t}\r\n  <\/script><div class=\"runner-container\"><canvas class=\"runner-canvas\" width=\"600\" height=\"150\"><\/canvas><\/div>\r\n\r\n\r\n\r\n    <script type=\"text\/javascript\">\r\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') <= -1) {\r\n\t  hideClass(\".onlyforchrome\");\r\n\t}\r\n  <\/script>");
document.close()
